{"ast":null,"code":"import { computed, onMounted, ref, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport StatusTag from '@/components/common/StatusTag.vue';\nimport { fetchNodeHeartbeat } from '@/api/nodes';\nimport { ElMessage } from 'element-plus';\nexport default {\n  __name: 'NodeMonitorView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const heartbeatVisible = ref(false);\n    const heartbeatDetail = ref({\n      name: '',\n      latest: '',\n      avgLatency: 0,\n      lastAlert: '',\n      logs: []\n    });\n    const canViewNodes = computed(() => store.getters['auth/hasPermission']('node:read'));\n    const canManageNodes = computed(() => store.getters['auth/hasPermission']('config:write'));\n    const metrics = computed(() => store.getters['nodes/nodeMetrics']);\n    const nodes = computed(() => store.getters['nodes/nodeList']);\n    const loading = computed(() => store.getters['nodes/nodesLoading']);\n\n    // 定义 refresh 函数（必须在 watch 之前定义）\n    const refresh = () => {\n      if (!canViewNodes.value) {\n        return;\n      }\n      store.dispatch('nodes/loadNodeMetrics');\n      store.dispatch('nodes/loadNodes');\n    };\n\n    // 监听权限变化，自动刷新数据\n    watch(canViewNodes, allowed => {\n      if (allowed) {\n        refresh();\n      }\n    }, {\n      immediate: true\n    });\n    onMounted(() => {\n      if (canViewNodes.value) {\n        refresh();\n      }\n    });\n    const offline = async node => {\n      if (!canManageNodes.value) {\n        ElMessage.warning('You do not have permission to manage nodes');\n        return;\n      }\n      await store.dispatch('nodes/decommissionNode', node.id);\n      refresh();\n    };\n    const rebalance = async node => {\n      if (!canManageNodes.value) {\n        ElMessage.warning('You do not have permission to manage nodes');\n        return;\n      }\n      await store.dispatch('nodes/rebalance', node.id);\n      refresh();\n    };\n    const openHeartbeat = async node => {\n      if (!canViewNodes.value) {\n        ElMessage.warning('You do not have permission to view heartbeat logs');\n        return;\n      }\n      const detail = await fetchNodeHeartbeat(node.id);\n      heartbeatDetail.value = detail;\n      heartbeatVisible.value = true;\n    };\n    const __returned__ = {\n      store,\n      heartbeatVisible,\n      heartbeatDetail,\n      canViewNodes,\n      canManageNodes,\n      metrics,\n      nodes,\n      loading,\n      refresh,\n      offline,\n      rebalance,\n      openHeartbeat,\n      computed,\n      onMounted,\n      ref,\n      watch,\n      get useStore() {\n        return useStore;\n      },\n      StatusTag,\n      get fetchNodeHeartbeat() {\n        return fetchNodeHeartbeat;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","onMounted","ref","watch","useStore","StatusTag","fetchNodeHeartbeat","ElMessage","store","heartbeatVisible","heartbeatDetail","name","latest","avgLatency","lastAlert","logs","canViewNodes","getters","canManageNodes","metrics","nodes","loading","refresh","value","dispatch","allowed","immediate","offline","node","warning","id","rebalance","openHeartbeat","detail"],"sources":["D:/桌面/项目/分布式任务调度系统/SkyTask/skytask-frontend/src/views/NodeMonitorView.vue"],"sourcesContent":["<template>\n  <div class=\"node-monitor\">\n    <section v-if=\"canViewNodes\" class=\"card node-monitor__summary\">\n      <div class=\"summary__item\">\n        <span class=\"summary__label\">Total Nodes</span>\n        <span class=\"summary__value\">{{ metrics.totalNodes }}</span>\n      </div>\n      <div class=\"summary__item\">\n        <span class=\"summary__label\">Online</span>\n        <span class=\"summary__value summary__value--success\">{{ metrics.onlineNodes }}</span>\n      </div>\n      <div class=\"summary__item\">\n        <span class=\"summary__label\">Offline</span>\n        <span class=\"summary__value summary__value--danger\">{{ metrics.offlineNodes }}</span>\n      </div>\n      <div class=\"summary__item\">\n        <span class=\"summary__label\">Avg CPU</span>\n        <span class=\"summary__value\">{{ metrics.avgCpu }}%</span>\n      </div>\n      <div class=\"summary__item\">\n        <span class=\"summary__label\">Avg Memory</span>\n        <span class=\"summary__value\">{{ metrics.avgMemory }}%</span>\n      </div>\n    </section>\n\n    <section v-if=\"canViewNodes\" class=\"card node-monitor__table\">\n      <div class=\"table__header\">\n        <h3>Worker Nodes</h3>\n        <el-button type=\"primary\" size=\"small\" @click=\"refresh\">Refresh</el-button>\n      </div>\n      <el-table :data=\"nodes\" v-loading=\"loading\" height=\"520\">\n        <el-table-column label=\"Node\" min-width=\"180\">\n          <template #default=\"{ row }\">\n            <div class=\"node-name\">\n              <el-tag size=\"small\" effect=\"plain\">{{ row.cluster }}</el-tag>\n              <strong>{{ row.name }}</strong>\n            </div>\n            <div class=\"node-meta\">\n              <span>Host: {{ row.host }}</span>\n              <span>Registered: {{ row.registerTime }}</span>\n            </div>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Status\" width=\"120\">\n          <template #default=\"{ row }\">\n            <StatusTag :status=\"row.status === 'ONLINE' ? 'SUCCESS' : 'FAILED'\">\n              {{ row.status === 'ONLINE' ? 'Online' : 'Offline' }}\n            </StatusTag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Resource\" width=\"240\">\n          <template #default=\"{ row }\">\n            <div class=\"resource\">\n              <span>CPU</span>\n              <el-progress :percentage=\"row.cpu\" :status=\"row.cpu > 80 ? 'exception' : 'success'\" />\n            </div>\n            <div class=\"resource\">\n              <span>Memory</span>\n              <el-progress :percentage=\"row.memory\" :status=\"row.memory > 80 ? 'exception' : 'warning'\" />\n            </div>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Runtime\" width=\"220\">\n          <template #default=\"{ row }\">\n            <div class=\"metrics\">\n              <span>Running: {{ row.runningTasks }}</span>\n              <span>Backlog: {{ row.backlog }}</span>\n              <span>Delay: {{ row.delay }} ms</span>\n              <span>Alert: {{ row.alertLevel }}</span>\n            </div>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"Actions\" width=\"220\" fixed=\"right\">\n          <template #default=\"{ row }\">\n            <el-button\n              v-if=\"canManageNodes\"\n              link\n              type=\"primary\"\n              size=\"small\"\n              @click=\"rebalance(row)\"\n            >\n              Rebalance\n            </el-button>\n            <el-button link type=\"warning\" size=\"small\" @click=\"openHeartbeat(row)\">\n              Heartbeat\n            </el-button>\n            <el-popconfirm\n              v-if=\"canManageNodes\"\n              title=\"Offline this node?\"\n              @confirm=\"offline(row)\"\n            >\n              <template #reference>\n                <el-button link type=\"danger\" size=\"small\">Offline</el-button>\n              </template>\n            </el-popconfirm>\n          </template>\n        </el-table-column>\n      </el-table>\n    </section>\n\n    <section v-else class=\"card node-monitor__empty\">\n      <el-empty description=\"You do not have permission to view nodes\" />\n    </section>\n\n    <el-drawer v-model=\"heartbeatVisible\" title=\"Node Heartbeat\" size=\"30%\">\n      <el-descriptions :column=\"1\" border>\n        <el-descriptions-item label=\"Node\">{{ heartbeatDetail.name }}</el-descriptions-item>\n        <el-descriptions-item label=\"Latest\">{{ heartbeatDetail.latest }}</el-descriptions-item>\n        <el-descriptions-item label=\"Avg Latency\">{{ heartbeatDetail.avgLatency }} ms</el-descriptions-item>\n        <el-descriptions-item label=\"Last Alert\">{{ heartbeatDetail.lastAlert || '-' }}</el-descriptions-item>\n      </el-descriptions>\n      <el-timeline class=\"heartbeat-timeline\">\n        <el-timeline-item\n          v-for=\"item in heartbeatDetail.logs\"\n          :key=\"item.time\"\n          :timestamp=\"item.time\"\n          :type=\"item.status\"\n        >\n          {{ item.message }}\n        </el-timeline-item>\n      </el-timeline>\n    </el-drawer>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport StatusTag from '@/components/common/StatusTag.vue';\nimport { fetchNodeHeartbeat } from '@/api/nodes';\nimport { ElMessage } from 'element-plus';\n\nconst store = useStore();\n\nconst heartbeatVisible = ref(false);\nconst heartbeatDetail = ref({\n  name: '',\n  latest: '',\n  avgLatency: 0,\n  lastAlert: '',\n  logs: []\n});\n\nconst canViewNodes = computed(() => store.getters['auth/hasPermission']('node:read'));\nconst canManageNodes = computed(() => store.getters['auth/hasPermission']('config:write'));\nconst metrics = computed(() => store.getters['nodes/nodeMetrics']);\nconst nodes = computed(() => store.getters['nodes/nodeList']);\nconst loading = computed(() => store.getters['nodes/nodesLoading']);\n\n// 定义 refresh 函数（必须在 watch 之前定义）\nconst refresh = () => {\n  if (!canViewNodes.value) {\n    return;\n  }\n  store.dispatch('nodes/loadNodeMetrics');\n  store.dispatch('nodes/loadNodes');\n};\n\n// 监听权限变化，自动刷新数据\nwatch(\n  canViewNodes,\n  (allowed) => {\n    if (allowed) {\n      refresh();\n    }\n  },\n  { immediate: true }\n);\n\nonMounted(() => {\n  if (canViewNodes.value) {\n    refresh();\n  }\n});\n\nconst offline = async (node) => {\n  if (!canManageNodes.value) {\n    ElMessage.warning('You do not have permission to manage nodes');\n    return;\n  }\n  await store.dispatch('nodes/decommissionNode', node.id);\n  refresh();\n};\n\nconst rebalance = async (node) => {\n  if (!canManageNodes.value) {\n    ElMessage.warning('You do not have permission to manage nodes');\n    return;\n  }\n  await store.dispatch('nodes/rebalance', node.id);\n  refresh();\n};\n\nconst openHeartbeat = async (node) => {\n  if (!canViewNodes.value) {\n    ElMessage.warning('You do not have permission to view heartbeat logs');\n    return;\n  }\n  const detail = await fetchNodeHeartbeat(node.id);\n  heartbeatDetail.value = detail;\n  heartbeatVisible.value = true;\n};\n</script>\n\n<style scoped lang=\"scss\">\n.node-monitor {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  &__summary {\n    display: grid;\n    grid-template-columns: repeat(5, minmax(0, 1fr));\n    gap: 16px;\n    padding: 20px 24px;\n  }\n\n  &__table {\n    padding: 20px;\n\n    .table__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 16px;\n\n      h3 {\n        margin: 0;\n      }\n    }\n  }\n\n  &__empty {\n    display: flex;\n    justify-content: center;\n    padding: 48px 0;\n  }\n}\n\n.summary__item {\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  color: #475569;\n\n  .summary__label {\n    font-size: 12px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n  }\n\n  .summary__value {\n    font-size: 24px;\n    font-weight: 700;\n    color: #0f172a;\n\n    &--success {\n      color: #10b981;\n    }\n\n    &--danger {\n      color: #ef4444;\n    }\n  }\n}\n\n.node-name {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  strong {\n    color: #0f172a;\n  }\n}\n\n.node-meta {\n  display: flex;\n  gap: 16px;\n  font-size: 12px;\n  color: #64748b;\n  margin-top: 6px;\n}\n\n.resource {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  font-size: 13px;\n  color: #475569;\n  margin-bottom: 8px;\n}\n\n.metrics {\n  display: grid;\n  gap: 4px;\n  font-size: 12px;\n  color: #475569;\n}\n\n.heartbeat-timeline {\n  margin-top: 16px;\n}\n</style>"],"mappings":"AA8HA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,GAAG,EAAEC,KAAK,QAAQ,KAAK;AACrD,SAASC,QAAQ,QAAQ,MAAM;AAC/B,OAAOC,SAAS,MAAM,mCAAmC;AACzD,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,SAAS,QAAQ,cAAc;;;;;;;IAExC,MAAMC,KAAK,GAAGJ,QAAQ,CAAC,CAAC;IAExB,MAAMK,gBAAgB,GAAGP,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMQ,eAAe,GAAGR,GAAG,CAAC;MAC1BS,IAAI,EAAE,EAAE;MACRC,MAAM,EAAE,EAAE;MACVC,UAAU,EAAE,CAAC;MACbC,SAAS,EAAE,EAAE;MACbC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAGhB,QAAQ,CAAC,MAAMQ,KAAK,CAACS,OAAO,CAAC,oBAAoB,CAAC,CAAC,WAAW,CAAC,CAAC;IACrF,MAAMC,cAAc,GAAGlB,QAAQ,CAAC,MAAMQ,KAAK,CAACS,OAAO,CAAC,oBAAoB,CAAC,CAAC,cAAc,CAAC,CAAC;IAC1F,MAAME,OAAO,GAAGnB,QAAQ,CAAC,MAAMQ,KAAK,CAACS,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAClE,MAAMG,KAAK,GAAGpB,QAAQ,CAAC,MAAMQ,KAAK,CAACS,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC7D,MAAMI,OAAO,GAAGrB,QAAQ,CAAC,MAAMQ,KAAK,CAACS,OAAO,CAAC,oBAAoB,CAAC,CAAC;;IAEnE;IACA,MAAMK,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAI,CAACN,YAAY,CAACO,KAAK,EAAE;QACvB;MACF;MACAf,KAAK,CAACgB,QAAQ,CAAC,uBAAuB,CAAC;MACvChB,KAAK,CAACgB,QAAQ,CAAC,iBAAiB,CAAC;IACnC,CAAC;;IAED;IACArB,KAAK,CACHa,YAAY,EACXS,OAAO,IAAK;MACX,IAAIA,OAAO,EAAE;QACXH,OAAO,CAAC,CAAC;MACX;IACF,CAAC,EACD;MAAEI,SAAS,EAAE;IAAK,CACpB,CAAC;IAEDzB,SAAS,CAAC,MAAM;MACd,IAAIe,YAAY,CAACO,KAAK,EAAE;QACtBD,OAAO,CAAC,CAAC;MACX;IACF,CAAC,CAAC;IAEF,MAAMK,OAAO,GAAG,MAAOC,IAAI,IAAK;MAC9B,IAAI,CAACV,cAAc,CAACK,KAAK,EAAE;QACzBhB,SAAS,CAACsB,OAAO,CAAC,4CAA4C,CAAC;QAC/D;MACF;MACA,MAAMrB,KAAK,CAACgB,QAAQ,CAAC,wBAAwB,EAAEI,IAAI,CAACE,EAAE,CAAC;MACvDR,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAMS,SAAS,GAAG,MAAOH,IAAI,IAAK;MAChC,IAAI,CAACV,cAAc,CAACK,KAAK,EAAE;QACzBhB,SAAS,CAACsB,OAAO,CAAC,4CAA4C,CAAC;QAC/D;MACF;MACA,MAAMrB,KAAK,CAACgB,QAAQ,CAAC,iBAAiB,EAAEI,IAAI,CAACE,EAAE,CAAC;MAChDR,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAMU,aAAa,GAAG,MAAOJ,IAAI,IAAK;MACpC,IAAI,CAACZ,YAAY,CAACO,KAAK,EAAE;QACvBhB,SAAS,CAACsB,OAAO,CAAC,mDAAmD,CAAC;QACtE;MACF;MACA,MAAMI,MAAM,GAAG,MAAM3B,kBAAkB,CAACsB,IAAI,CAACE,EAAE,CAAC;MAChDpB,eAAe,CAACa,KAAK,GAAGU,MAAM;MAC9BxB,gBAAgB,CAACc,KAAK,GAAG,IAAI;IAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}