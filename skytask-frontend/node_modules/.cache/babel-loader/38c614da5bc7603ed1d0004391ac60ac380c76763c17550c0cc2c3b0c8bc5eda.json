{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport authApi from '../../api/auth';\nconst STORAGE_KEY = 'skytask-auth';\nconst defaultState = () => ({\n  environments: [{\n    label: '开发环境',\n    value: 'dev'\n  }, {\n    label: '测试环境',\n    value: 'test'\n  }, {\n    label: '生产环境',\n    value: 'prod'\n  }],\n  currentEnv: 'dev',\n  accessToken: '',\n  refreshToken: '',\n  profile: null\n});\nconst loadPersistedState = () => {\n  if (typeof window === 'undefined') {\n    return defaultState();\n  }\n  try {\n    const stored = window.localStorage.getItem(STORAGE_KEY);\n    if (!stored) {\n      return defaultState();\n    }\n    const parsed = JSON.parse(stored);\n    return {\n      ...defaultState(),\n      ...parsed,\n      profile: parsed.profile || null\n    };\n  } catch (err) {\n    console.warn('[auth] Failed to parse persisted state', err);\n    return defaultState();\n  }\n};\nconst persistState = state => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const payload = {\n    currentEnv: state.currentEnv,\n    accessToken: state.accessToken,\n    refreshToken: state.refreshToken,\n    profile: state.profile\n  };\n  window.localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));\n};\nconst clearPersistedState = () => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  window.localStorage.removeItem(STORAGE_KEY);\n};\nconst state = () => loadPersistedState();\nconst mutations = {\n  SET_ENV(state, env) {\n    state.currentEnv = env;\n    persistState(state);\n  },\n  SET_CREDENTIALS(state, {\n    accessToken,\n    refreshToken,\n    profile\n  }) {\n    state.accessToken = accessToken;\n    state.refreshToken = refreshToken;\n    state.profile = profile;\n    persistState(state);\n  },\n  CLEAR_CREDENTIALS(state) {\n    const base = defaultState();\n    state.accessToken = '';\n    state.refreshToken = '';\n    state.profile = null;\n    state.currentEnv = base.currentEnv;\n    clearPersistedState();\n  },\n  SET_PROFILE(state, profile) {\n    state.profile = profile;\n    persistState(state);\n  }\n};\nconst actions = {\n  changeEnv({\n    commit\n  }, env) {\n    commit('SET_ENV', env);\n  },\n  async login({\n    commit\n  }, payload) {\n    const response = await authApi.login(payload);\n    const profile = {\n      username: response.username,\n      displayName: response.displayName,\n      tenantCode: response.tenantCode,\n      tenantName: response.tenantName,\n      roles: response.roles || [],\n      permissions: response.permissions || []\n    };\n    commit('SET_CREDENTIALS', {\n      accessToken: response.accessToken,\n      refreshToken: response.refreshToken,\n      profile\n    });\n    return response;\n  },\n  async refresh({\n    state,\n    commit\n  }) {\n    if (!state.refreshToken) {\n      throw new Error('Refresh token missing');\n    }\n    const response = await authApi.refreshToken(state.refreshToken);\n    const profile = state.profile ? {\n      ...state.profile,\n      roles: response.roles || state.profile.roles || [],\n      permissions: response.permissions || state.profile.permissions || []\n    } : {\n      username: response.username,\n      displayName: response.displayName,\n      tenantCode: response.tenantCode,\n      tenantName: response.tenantName,\n      roles: response.roles || [],\n      permissions: response.permissions || []\n    };\n    commit('SET_CREDENTIALS', {\n      accessToken: response.accessToken,\n      refreshToken: response.refreshToken ?? state.refreshToken,\n      profile\n    });\n    return response;\n  },\n  async fetchProfile({\n    commit\n  }) {\n    const response = await authApi.fetchProfile();\n    const profile = {\n      userId: response.userId,\n      username: response.username,\n      displayName: response.displayName,\n      tenantCode: response.tenantCode,\n      tenantName: response.tenantName,\n      roles: response.roles || [],\n      permissions: response.permissions || []\n    };\n    commit('SET_PROFILE', profile);\n    return profile;\n  },\n  logout({\n    commit\n  }) {\n    commit('CLEAR_CREDENTIALS');\n  }\n};\nconst getters = {\n  environments: state => state.environments,\n  currentEnv: state => state.currentEnv,\n  token: state => state.accessToken,\n  refreshToken: state => state.refreshToken,\n  profile: state => state.profile,\n  tenantCode: state => state.profile?.tenantCode || '',\n  tenantName: state => state.profile?.tenantName || '',\n  isAuthenticated: state => Boolean(state.accessToken && state.profile),\n  hasPermission: state => permission => Boolean(permission && state.profile?.permissions?.includes(permission)),\n  hasAnyPermission: state => (permissions = []) => permissions.some(permission => state.profile?.permissions?.includes(permission)),\n  hasRole: state => role => Boolean(role && state.profile?.roles?.includes(role)),\n  roles: state => state.profile?.roles || [],\n  permissions: state => state.profile?.permissions || []\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["authApi","STORAGE_KEY","defaultState","environments","label","value","currentEnv","accessToken","refreshToken","profile","loadPersistedState","window","stored","localStorage","getItem","parsed","JSON","parse","err","console","warn","persistState","state","payload","setItem","stringify","clearPersistedState","removeItem","mutations","SET_ENV","env","SET_CREDENTIALS","CLEAR_CREDENTIALS","base","SET_PROFILE","actions","changeEnv","commit","login","response","username","displayName","tenantCode","tenantName","roles","permissions","refresh","Error","fetchProfile","userId","logout","getters","token","isAuthenticated","Boolean","hasPermission","permission","includes","hasAnyPermission","some","hasRole","role","namespaced"],"sources":["D:/桌面/项目/分布式任务调度系统/SkyTask/skytask-frontend/src/store/modules/auth.js"],"sourcesContent":["import authApi from '../../api/auth';\n\nconst STORAGE_KEY = 'skytask-auth';\n\nconst defaultState = () => ({\n  environments: [\n    { label: '开发环境', value: 'dev' },\n    { label: '测试环境', value: 'test' },\n    { label: '生产环境', value: 'prod' }\n  ],\n  currentEnv: 'dev',\n  accessToken: '',\n  refreshToken: '',\n  profile: null\n});\n\nconst loadPersistedState = () => {\n  if (typeof window === 'undefined') {\n    return defaultState();\n  }\n  try {\n    const stored = window.localStorage.getItem(STORAGE_KEY);\n    if (!stored) {\n      return defaultState();\n    }\n    const parsed = JSON.parse(stored);\n    return {\n      ...defaultState(),\n      ...parsed,\n      profile: parsed.profile || null\n    };\n  } catch (err) {\n    console.warn('[auth] Failed to parse persisted state', err);\n    return defaultState();\n  }\n};\n\nconst persistState = (state) => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  const payload = {\n    currentEnv: state.currentEnv,\n    accessToken: state.accessToken,\n    refreshToken: state.refreshToken,\n    profile: state.profile\n  };\n  window.localStorage.setItem(STORAGE_KEY, JSON.stringify(payload));\n};\n\nconst clearPersistedState = () => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n  window.localStorage.removeItem(STORAGE_KEY);\n};\n\nconst state = () => loadPersistedState();\n\nconst mutations = {\n  SET_ENV(state, env) {\n    state.currentEnv = env;\n    persistState(state);\n  },\n  SET_CREDENTIALS(state, { accessToken, refreshToken, profile }) {\n    state.accessToken = accessToken;\n    state.refreshToken = refreshToken;\n    state.profile = profile;\n    persistState(state);\n  },\n  CLEAR_CREDENTIALS(state) {\n    const base = defaultState();\n    state.accessToken = '';\n    state.refreshToken = '';\n    state.profile = null;\n    state.currentEnv = base.currentEnv;\n    clearPersistedState();\n  },\n  SET_PROFILE(state, profile) {\n    state.profile = profile;\n    persistState(state);\n  }\n};\n\nconst actions = {\n  changeEnv({ commit }, env) {\n    commit('SET_ENV', env);\n  },\n  async login({ commit }, payload) {\n    const response = await authApi.login(payload);\n    const profile = {\n      username: response.username,\n      displayName: response.displayName,\n      tenantCode: response.tenantCode,\n      tenantName: response.tenantName,\n      roles: response.roles || [],\n      permissions: response.permissions || []\n    };\n    commit('SET_CREDENTIALS', {\n      accessToken: response.accessToken,\n      refreshToken: response.refreshToken,\n      profile\n    });\n    return response;\n  },\n  async refresh({ state, commit }) {\n    if (!state.refreshToken) {\n      throw new Error('Refresh token missing');\n    }\n    const response = await authApi.refreshToken(state.refreshToken);\n    const profile = state.profile\n        ? {\n            ...state.profile,\n            roles: response.roles || state.profile.roles || [],\n            permissions: response.permissions || state.profile.permissions || []\n          }\n        : {\n            username: response.username,\n            displayName: response.displayName,\n            tenantCode: response.tenantCode,\n            tenantName: response.tenantName,\n            roles: response.roles || [],\n            permissions: response.permissions || []\n          };\n    commit('SET_CREDENTIALS', {\n      accessToken: response.accessToken,\n      refreshToken: response.refreshToken ?? state.refreshToken,\n      profile\n    });\n    return response;\n  },\n  async fetchProfile({ commit }) {\n    const response = await authApi.fetchProfile();\n    const profile = {\n      userId: response.userId,\n      username: response.username,\n      displayName: response.displayName,\n      tenantCode: response.tenantCode,\n      tenantName: response.tenantName,\n      roles: response.roles || [],\n      permissions: response.permissions || []\n    };\n    commit('SET_PROFILE', profile);\n    return profile;\n  },\n  logout({ commit }) {\n    commit('CLEAR_CREDENTIALS');\n  }\n};\n\nconst getters = {\n  environments: (state) => state.environments,\n  currentEnv: (state) => state.currentEnv,\n  token: (state) => state.accessToken,\n  refreshToken: (state) => state.refreshToken,\n  profile: (state) => state.profile,\n  tenantCode: (state) => state.profile?.tenantCode || '',\n  tenantName: (state) => state.profile?.tenantName || '',\n  isAuthenticated: (state) => Boolean(state.accessToken && state.profile),\n  hasPermission: (state) => (permission) =>\n    Boolean(permission && state.profile?.permissions?.includes(permission)),\n  hasAnyPermission: (state) => (permissions = []) =>\n    permissions.some((permission) => state.profile?.permissions?.includes(permission)),\n  hasRole: (state) => (role) => Boolean(role && state.profile?.roles?.includes(role)),\n  roles: (state) => state.profile?.roles || [],\n  permissions: (state) => state.profile?.permissions || []\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}