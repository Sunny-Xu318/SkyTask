{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { computed, onMounted, ref } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport StatusTag from '@/components/common/StatusTag.vue';\nimport TaskFormDrawer from '@/components/task/TaskFormDrawer.vue';\nimport TaskDependencyGraph from '@/components/task/TaskDependencyGraph.vue';\nimport BaseChart from '@/components/charts/BaseChart.vue';\nexport default {\n  __name: 'TaskDetailView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const route = useRoute();\n    const router = useRouter();\n    const taskId = route.params.taskId;\n    const drawerVisible = ref(false);\n    const submitting = ref(false);\n    const logVisible = ref(false);\n    const activeLog = ref('');\n    const triggering = ref(false);\n    const detailLoading = ref(false);\n    const chartRange = ref('24h');\n    const groupOptions = [{\n      label: 'Data Report',\n      value: 'DATA_REPORT'\n    }, {\n      label: 'Realtime Risk',\n      value: 'RISK_CONTROL'\n    }, {\n      label: 'Marketing',\n      value: 'MARKETING'\n    }, {\n      label: 'Recommendation',\n      value: 'RECOMMEND'\n    }];\n    const ownerOptions = [{\n      label: 'Alice - Data Platform',\n      value: 'alice'\n    }, {\n      label: 'Bob - Marketing',\n      value: 'bob'\n    }, {\n      label: 'Carol - Settlement',\n      value: 'carol'\n    }, {\n      label: 'David - Recommendation',\n      value: 'david'\n    }];\n    const tagOptions = ['report', 'risk', 'cache', 'recommend', 'marketing', 'settlement'];\n    const parseError = error => error?.response?.data?.message || error?.message || 'Operation failed, please try again later.';\n    onMounted(async () => {\n      detailLoading.value = true;\n      try {\n        await store.dispatch('tasks/loadTaskDetail', taskId);\n        await loadExecutions();\n      } catch (error) {\n        ElMessage.error(parseError(error));\n      } finally {\n        detailLoading.value = false;\n      }\n    });\n    const detail = computed(() => store.getters['tasks/currentTask'] || {});\n    const executions = computed(() => store.getters['tasks/taskExecutions'] || []);\n    const executionLoading = computed(() => store.getters['tasks/taskExecutionLoading']);\n    const parameterText = computed(() => {\n      const params = detail.value?.parameters;\n      if (!params) return 'No parameters configured';\n      if (typeof params === 'string') return params;\n      try {\n        return JSON.stringify(params, null, 2);\n      } catch (error) {\n        return String(params);\n      }\n    });\n    const hasExecutionData = computed(() => Array.isArray(executions.value) && executions.value.length > 0);\n    const executionStats = computed(() => {\n      if (!hasExecutionData.value) return {\n        success: 0,\n        failed: 0\n      };\n      const success = executions.value.filter(e => e.status === 'SUCCESS').length;\n      const failed = executions.value.filter(e => e.status === 'FAILED').length;\n      return {\n        success,\n        failed\n      };\n    });\n    const successTrendOptions = computed(() => {\n      if (!hasExecutionData.value) return {};\n      const sortedExecs = [...executions.value].sort((a, b) => {\n        // 处理对象类型的 triggerTime (OffsetDateTime 对象)\n        const getTimeString = triggerTime => {\n          if (!triggerTime) return '';\n          if (typeof triggerTime === 'object') {\n            // 处理 OffsetDateTime 对象格式\n            if (triggerTime.dateTime) {\n              return triggerTime.dateTime;\n            } else if (triggerTime.toString && triggerTime.toString() !== '[object Object]') {\n              return triggerTime.toString();\n            } else if (triggerTime.value) {\n              return triggerTime.value;\n            } else if (triggerTime.date) {\n              return triggerTime.date;\n            }\n            return '';\n          }\n          return triggerTime;\n        };\n        const timeA = getTimeString(a.triggerTime);\n        const timeB = getTimeString(b.triggerTime);\n\n        // 直接使用字符串比较，避免日期解析问题\n        return timeA.localeCompare(timeB);\n      });\n\n      // 根据时间范围动态格式化横坐标\n      const formatTimeLabel = triggerTime => {\n        if (!triggerTime) return '';\n\n        // 处理对象类型的 triggerTime (OffsetDateTime 对象)\n        let timeString = triggerTime;\n        if (typeof triggerTime === 'object') {\n          // 处理 OffsetDateTime 对象格式\n          if (triggerTime.dateTime) {\n            // 格式: {dateTime: \"2024-01-15T10:30:00\", offset: {totalSeconds: 28800}}\n            timeString = triggerTime.dateTime;\n          } else if (triggerTime.toString && triggerTime.toString() !== '[object Object]') {\n            timeString = triggerTime.toString();\n          } else if (triggerTime.value) {\n            timeString = triggerTime.value;\n          } else if (triggerTime.date) {\n            timeString = triggerTime.date;\n          } else {\n            // 如果无法转换，返回默认值\n            console.warn('Cannot convert triggerTime object to string:', triggerTime);\n            return 'Invalid Date';\n          }\n        }\n\n        // 简化的日期处理 - 直接使用字符串截取，避免日期解析问题\n        try {\n          // 如果是 ISO 格式 (2024-01-01T12:00:00+08:00 或 2024-01-01T12:00:00Z)\n          if (timeString.includes('T')) {\n            const datePart = timeString.split('T')[0]; // 2024-01-01\n            const timePart = timeString.split('T')[1]?.split(/[+Z-]/)[0]; // 12:00:00\n\n            switch (chartRange.value) {\n              case '24h':\n                {\n                  // 24小时：显示 HH:mm\n                  return timePart ? timePart.substring(0, 5) : '00:00';\n                }\n              case '7d':\n                {\n                  // 7天：显示 MM-dd HH:mm\n                  const monthDay = datePart.substring(5); // 01-01\n                  const hourMin = timePart ? timePart.substring(0, 5) : '00:00';\n                  return `${monthDay} ${hourMin}`;\n                }\n              case '30d':\n                {\n                  // 30天：显示 MM-dd\n                  return datePart.substring(5); // 01-01\n                }\n              default:\n                return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n            }\n          } else {\n            // 如果不是 ISO 格式，使用简单的字符串截取\n            switch (chartRange.value) {\n              case '24h':\n                return timeString.length > 16 ? timeString.substring(11, 16) : timeString;\n              case '7d':\n                return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n              case '30d':\n                return timeString.length > 10 ? timeString.substring(5, 10) : timeString;\n              default:\n                return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n            }\n          }\n        } catch (error) {\n          console.warn('Date formatting error:', error, 'for value:', triggerTime);\n          return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n        }\n      };\n      const categories = sortedExecs.map(formatTimeLabel);\n      const successData = sortedExecs.map(e => e.status === 'SUCCESS' ? 100 : 0);\n      const failedData = sortedExecs.map(e => e.status === 'FAILED' ? 100 : 0);\n\n      // 根据时间范围调整标签旋转角度\n      const labelRotation = chartRange.value === '30d' ? 45 : 0;\n      return {\n        color: ['#22c55e', '#ef4444'],\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => params.map(p => `${p.marker}${p.seriesName}: ${p.value}%`).join('<br/>')\n        },\n        legend: {\n          data: ['Success', 'Failed']\n        },\n        grid: {\n          left: 50,\n          right: 24,\n          top: 40,\n          bottom: 50\n        },\n        xAxis: {\n          type: 'category',\n          data: categories,\n          axisLabel: {\n            rotate: labelRotation,\n            fontSize: 11,\n            interval: chartRange.value === '30d' ? 'auto' : 0\n          }\n        },\n        yAxis: {\n          type: 'value',\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: [{\n          name: 'Success',\n          type: 'line',\n          smooth: true,\n          areaStyle: {\n            opacity: 0.3\n          },\n          data: successData\n        }, {\n          name: 'Failed',\n          type: 'line',\n          smooth: true,\n          areaStyle: {\n            opacity: 0.3\n          },\n          data: failedData\n        }]\n      };\n    });\n    const durationChartOptions = computed(() => {\n      if (!hasExecutionData.value) return {};\n      const sortedExecs = [...executions.value].sort((a, b) => new Date(a.triggerTime) - new Date(b.triggerTime)).slice(-20);\n      const categories = sortedExecs.map(e => e.triggerTime?.substring(11, 16) || '');\n      const durations = sortedExecs.map(e => Number(e.duration || 0));\n      return {\n        color: ['#f97316'],\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            const p = params[0];\n            return `${p.axisValue}<br/>${p.marker}Duration: ${p.value} ms`;\n          }\n        },\n        grid: {\n          left: 60,\n          right: 24,\n          top: 30,\n          bottom: 60\n        },\n        xAxis: {\n          type: 'category',\n          data: categories,\n          axisLabel: {\n            rotate: 45,\n            fontSize: 11\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value} ms'\n          }\n        },\n        series: [{\n          name: 'Duration',\n          type: 'bar',\n          barMaxWidth: 30,\n          data: durations,\n          itemStyle: {\n            color: params => {\n              const val = params.value;\n              if (val < 1000) return '#22c55e';\n              if (val < 5000) return '#f59e0b';\n              return '#ef4444';\n            }\n          }\n        }]\n      };\n    });\n    const loadExecutions = async () => {\n      try {\n        await store.dispatch('tasks/loadTaskExecutions', {\n          taskId,\n          page: 1,\n          size: 50,\n          range: chartRange.value\n        });\n      } catch (error) {\n        ElMessage.error(parseError(error));\n      }\n    };\n    const goBack = () => {\n      router.back();\n    };\n    const openEdit = () => {\n      drawerVisible.value = true;\n    };\n    const onDrawerVisible = visible => {\n      drawerVisible.value = visible;\n      if (!visible) {\n        submitting.value = false;\n      }\n    };\n    const submitTask = async payload => {\n      submitting.value = true;\n      try {\n        await store.dispatch('tasks/submitTask', payload);\n        await store.dispatch('tasks/loadTaskDetail', taskId);\n        drawerVisible.value = false;\n        ElMessage.success('Task updated');\n      } catch (error) {\n        ElMessage.error(parseError(error));\n      } finally {\n        submitting.value = false;\n      }\n    };\n    const triggerTask = async () => {\n      if (!detail.value?.id || triggering.value) {\n        return;\n      }\n      triggering.value = true;\n      try {\n        await store.dispatch('tasks/triggerTask', {\n          taskId,\n          payload: {\n            manual: true,\n            operator: store.getters['auth/profile']?.username || 'anonymous'\n          }\n        });\n        ElMessage.success('Execution triggered');\n        setTimeout(loadExecutions, 2000);\n      } catch (error) {\n        ElMessage.error(parseError(error));\n      } finally {\n        triggering.value = false;\n      }\n    };\n    const confirmDelete = async () => {\n      try {\n        await store.dispatch('tasks/removeTask', taskId);\n        ElMessage.success('Task deleted');\n        router.push('/tasks');\n      } catch (error) {\n        ElMessage.error(parseError(error));\n      }\n    };\n    const openLog = record => {\n      logVisible.value = true;\n\n      // 构建详细的日志信息\n      const logInfo = {\n        '执行记录ID': record.id || '-',\n        '任务ID': record.taskId || '-',\n        '触发时间': record.triggerTime || '-',\n        '执行节点': record.node || '-',\n        '执行状态': record.status || '-',\n        '执行耗时': record.duration ? `${record.duration}ms` : '-',\n        '重试次数': record.retry || 0,\n        'Trace ID': record.traceId || '-',\n        '执行结果': record.log || 'No execution result',\n        '返回参数': record.parameters ? JSON.stringify(record.parameters, null, 2) : 'No parameters returned'\n      };\n\n      // 格式化日志显示\n      const formattedLog = Object.entries(logInfo).map(([key, value]) => `【${key}】\\n${value}`).join('\\n\\n' + '='.repeat(50) + '\\n\\n');\n      activeLog.value = formattedLog;\n    };\n    const copyLog = () => {\n      if (!activeLog.value) {\n        return;\n      }\n      navigator.clipboard.writeText(activeLog.value).then(() => ElMessage.success('Copied to clipboard')).catch(() => ElMessage.error('Copy failed'));\n    };\n    const openCronHelper = () => {\n      router.push({\n        path: '/config',\n        query: {\n          tab: 'cron-tool'\n        }\n      });\n    };\n    const getDurationTagType = duration => {\n      const value = Number(duration || 0);\n      if (value < 1000) return 'success';\n      if (value < 5000) return 'warning';\n      return 'danger';\n    };\n    const typeLabel = type => {\n      const map = {\n        CRON: 'Cron',\n        ONE_TIME: 'One-time',\n        FIXED_RATE: 'Fixed Rate'\n      };\n      return map[type] || type || '-';\n    };\n    const executorLabel = executor => {\n      const map = {\n        HTTP: 'HTTP',\n        GRPC: 'gRPC',\n        SPRING_BEAN: 'Spring Bean',\n        SHELL: 'Shell'\n      };\n      return map[executor] || executor || '-';\n    };\n    const routeLabel = route => {\n      const map = {\n        ROUND_ROBIN: 'Round Robin',\n        CONSISTENT_HASH: 'Consistent Hash',\n        SHARDING: 'Sharding',\n        FIXED_NODE: 'Fixed Node'\n      };\n      return map[route] || route || '-';\n    };\n    const retryLabel = retry => {\n      const map = {\n        NONE: 'None',\n        FIXED_INTERVAL: 'Fixed Interval',\n        EXP_BACKOFF: 'Exponential Backoff'\n      };\n      return map[retry] || retry || 'Fixed Interval';\n    };\n    const concurrencyLabel = policy => {\n      const map = {\n        PARALLEL: 'Parallel',\n        SERIAL: 'Serial',\n        DISCARD: 'Discard'\n      };\n      return map[policy] || policy || 'Parallel';\n    };\n    const __returned__ = {\n      store,\n      route,\n      router,\n      taskId,\n      drawerVisible,\n      submitting,\n      logVisible,\n      activeLog,\n      triggering,\n      detailLoading,\n      chartRange,\n      groupOptions,\n      ownerOptions,\n      tagOptions,\n      parseError,\n      detail,\n      executions,\n      executionLoading,\n      parameterText,\n      hasExecutionData,\n      executionStats,\n      successTrendOptions,\n      durationChartOptions,\n      loadExecutions,\n      goBack,\n      openEdit,\n      onDrawerVisible,\n      submitTask,\n      triggerTask,\n      confirmDelete,\n      openLog,\n      copyLog,\n      openCronHelper,\n      getDurationTagType,\n      typeLabel,\n      executorLabel,\n      routeLabel,\n      retryLabel,\n      concurrencyLabel,\n      computed,\n      onMounted,\n      ref,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      StatusTag,\n      TaskFormDrawer,\n      TaskDependencyGraph,\n      BaseChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","onMounted","ref","useRoute","useRouter","useStore","ElMessage","StatusTag","TaskFormDrawer","TaskDependencyGraph","BaseChart","store","route","router","taskId","params","drawerVisible","submitting","logVisible","activeLog","triggering","detailLoading","chartRange","groupOptions","label","value","ownerOptions","tagOptions","parseError","error","response","data","message","dispatch","loadExecutions","detail","getters","executions","executionLoading","parameterText","parameters","JSON","stringify","String","hasExecutionData","Array","isArray","length","executionStats","success","failed","filter","e","status","successTrendOptions","sortedExecs","sort","a","b","getTimeString","triggerTime","dateTime","toString","date","timeA","timeB","localeCompare","formatTimeLabel","timeString","console","warn","includes","datePart","split","timePart","substring","monthDay","hourMin","categories","map","successData","failedData","labelRotation","color","tooltip","trigger","formatter","p","marker","seriesName","join","legend","grid","left","right","top","bottom","xAxis","type","axisLabel","rotate","fontSize","interval","yAxis","min","max","series","name","smooth","areaStyle","opacity","durationChartOptions","Date","slice","durations","Number","duration","axisValue","barMaxWidth","itemStyle","val","page","size","range","goBack","back","openEdit","onDrawerVisible","visible","submitTask","payload","triggerTask","id","manual","operator","username","setTimeout","confirmDelete","push","openLog","record","logInfo","node","retry","traceId","log","formattedLog","Object","entries","key","repeat","copyLog","navigator","clipboard","writeText","then","catch","openCronHelper","path","query","tab","getDurationTagType","typeLabel","CRON","ONE_TIME","FIXED_RATE","executorLabel","executor","HTTP","GRPC","SPRING_BEAN","SHELL","routeLabel","ROUND_ROBIN","CONSISTENT_HASH","SHARDING","FIXED_NODE","retryLabel","NONE","FIXED_INTERVAL","EXP_BACKOFF","concurrencyLabel","policy","PARALLEL","SERIAL","DISCARD"],"sources":["D:/桌面/项目/分布式任务调度系统/SkyTask-main/SkyTask-main/skytask-frontend/src/views/TaskDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"task-detail\">\n    <el-page-header @back=\"goBack\">\n      <template #content>\n        <div class=\"header\">\n          <span class=\"header__title\">{{ detail?.name || 'Task Detail' }}</span>\n          <StatusTag :status=\"detail?.enabled ? 'SUCCESS' : 'DISABLED'\" />\n          <el-tag v-if=\"detail?.group\" type=\"info\" effect=\"plain\">{{ detail.group }}</el-tag>\n        </div>\n      </template>\n      <template #extra>\n        <el-space>\n          <el-button type=\"primary\" :loading=\"triggering\" @click=\"triggerTask\">Run Now</el-button>\n          <el-button @click=\"openEdit\">Edit Task</el-button>\n          <el-popconfirm\n            title=\"Delete this task?\"\n            confirm-button-text=\"Confirm\"\n            cancel-button-text=\"Cancel\"\n            @confirm=\"confirmDelete\"\n          >\n            <template #reference>\n              <el-button type=\"danger\">Delete</el-button>\n            </template>\n          </el-popconfirm>\n        </el-space>\n      </template>\n    </el-page-header>\n\n    <div v-loading=\"detailLoading\" class=\"content\">\n      <section class=\"card detail-card\">\n        <div class=\"detail-card__section\">\n          <h3>Basic Information</h3>\n          <el-descriptions :column=\"2\" size=\"small\" border>\n            <el-descriptions-item label=\"Task ID\">{{ detail?.id || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"Task Type\">{{ typeLabel(detail?.type) }}</el-descriptions-item>\n            <el-descriptions-item label=\"Executor\">{{ executorLabel(detail?.executorType) }}</el-descriptions-item>\n            <el-descriptions-item label=\"Cron Expression\">\n              <el-tag v-if=\"detail?.cronExpr\" type=\"success\" effect=\"plain\">{{ detail.cronExpr }}</el-tag>\n              <span v-else>-</span>\n            </el-descriptions-item>\n            <el-descriptions-item label=\"Owner\">{{ detail?.owner || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"Timeout\">{{ detail?.timeout || 300 }} s</el-descriptions-item>\n            <el-descriptions-item label=\"Created At\">{{ detail?.createdAt || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"Updated At\">{{ detail?.updatedAt || '-' }}</el-descriptions-item>\n          </el-descriptions>\n        </div>\n\n        <div class=\"detail-card__section\">\n          <h3>Scheduling Strategy</h3>\n          <el-descriptions :column=\"2\" size=\"small\" border>\n            <el-descriptions-item label=\"Route Strategy\">{{ routeLabel(detail?.routeStrategy) }}</el-descriptions-item>\n            <el-descriptions-item label=\"Max Retry\">{{ detail?.maxRetry ?? 0 }}</el-descriptions-item>\n            <el-descriptions-item label=\"Retry Policy\">{{ retryLabel(detail?.retryPolicy) }}</el-descriptions-item>\n            <el-descriptions-item label=\"Shards\">{{ detail?.shardCount ?? 1 }}</el-descriptions-item>\n            <el-descriptions-item label=\"Idempotent Key\">{{ detail?.idempotentKey || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"Concurrency\">{{ concurrencyLabel(detail?.concurrencyPolicy) }}</el-descriptions-item>\n          </el-descriptions>\n        </div>\n\n        <div class=\"detail-card__section\">\n          <h3>Task Parameters</h3>\n          <el-input\n            v-model=\"parameterText\"\n            type=\"textarea\"\n            :rows=\"5\"\n            readonly\n            placeholder=\"No parameters configured\"\n          />\n        </div>\n      </section>\n\n      <section class=\"card chart-card\">\n        <div class=\"chart-card__header\">\n          <h3>Execution Success Trend</h3>\n          <el-radio-group v-model=\"chartRange\" size=\"small\" @change=\"loadExecutions\">\n            <el-radio-button label=\"24h\">24h</el-radio-button>\n            <el-radio-button label=\"7d\">7d</el-radio-button>\n            <el-radio-button label=\"30d\">30d</el-radio-button>\n          </el-radio-group>\n        </div>\n        <div v-loading=\"executionLoading\" class=\"chart-content\">\n          <BaseChart v-if=\"hasExecutionData\" :options=\"successTrendOptions\" class=\"chart\" />\n          <el-empty v-else description=\"No execution data yet\" />\n        </div>\n      </section>\n\n      <section class=\"card chart-card\">\n        <div class=\"chart-card__header\">\n          <h3>Execution Duration (latest 20)</h3>\n          <el-tag size=\"small\" type=\"info\">Latest 20 executions</el-tag>\n        </div>\n        <div v-loading=\"executionLoading\" class=\"chart-content\">\n          <BaseChart v-if=\"hasExecutionData\" :options=\"durationChartOptions\" class=\"chart\" />\n          <el-empty v-else description=\"No execution data yet\" />\n        </div>\n      </section>\n\n      <section class=\"card execution-card\">\n        <div class=\"execution-card__header\">\n          <h3>Recent Executions</h3>\n          <el-space>\n            <el-tag size=\"small\">\n              Success: {{ executionStats.success }} | Failed: {{ executionStats.failed }}\n            </el-tag>\n            <el-button size=\"small\" @click=\"loadExecutions\">Refresh</el-button>\n          </el-space>\n        </div>\n        <el-table :data=\"executions\" height=\"320\" v-loading=\"executionLoading\">\n          <el-table-column prop=\"triggerTime\" label=\"Trigger Time\" width=\"160\" />\n          <el-table-column prop=\"node\" label=\"Node\" width=\"140\" show-overflow-tooltip />\n          <el-table-column label=\"Status\" width=\"110\">\n            <template #default=\"{ row }\">\n              <StatusTag :status=\"row.status || 'UNKNOWN'\" />\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"duration\" label=\"Duration\" width=\"110\">\n            <template #default=\"{ row }\">\n              <el-tag :type=\"getDurationTagType(row.duration)\" size=\"small\">\n                {{ row.duration || 0 }} ms\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"retry\" label=\"Retry\" width=\"80\" />\n          <el-table-column prop=\"traceId\" label=\"Trace ID\" min-width=\"160\" show-overflow-tooltip />\n          <el-table-column label=\"Action\" width=\"110\" fixed=\"right\">\n            <template #default=\"{ row }\">\n              <el-button link type=\"primary\" size=\"small\" @click=\"openLog(row)\">View Log</el-button>\n            </template>\n          </el-table-column>\n          <template #empty>\n            <el-empty description=\"No execution records\" />\n          </template>\n        </el-table>\n      </section>\n\n      <section class=\"card dependency-card\">\n        <div class=\"dependency-card__header\">\n          <h3>Upstream Dependencies</h3>\n          <el-tag v-if=\"detail?.dependencies?.length\" size=\"small\" type=\"info\">\n            {{ detail.dependencies.length }} tasks\n          </el-tag>\n        </div>\n        <TaskDependencyGraph\n          :task-name=\"detail?.name\"\n          :dependencies=\"detail?.dependencies || []\"\n        />\n        <el-timeline v-if=\"detail?.dependencies?.length\" class=\"dependency-timeline\">\n          <el-timeline-item\n            v-for=\"dep in detail.dependencies\"\n            :key=\"dep.id\"\n            :timestamp=\"dep.triggerType || 'Manual'\"\n            :type=\"dep.status === 'SUCCESS' ? 'success' : dep.status === 'FAILED' ? 'danger' : 'info'\"\n          >\n            <div class=\"dependency-item\">\n              <strong>{{ dep.name }}</strong>\n              <span>Node: {{ dep.node || '-' }}</span>\n              <span>Status: <StatusTag :status=\"dep.status || 'UNKNOWN'\" /></span>\n              <el-tag v-if=\"dep.cronExpr\" size=\"small\" effect=\"plain\">{{ dep.cronExpr }}</el-tag>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n      </section>\n    </div>\n\n    <TaskFormDrawer\n      v-model:visible=\"drawerVisible\"\n      :model-value=\"detail\"\n      :group-options=\"groupOptions\"\n      :owner-options=\"ownerOptions\"\n      :tag-options=\"tagOptions\"\n      :submitting=\"submitting\"\n      @submit=\"submitTask\"\n      @update:visible=\"onDrawerVisible\"\n      @cron-helper=\"openCronHelper\"\n    />\n\n    <el-drawer\n      v-model=\"logVisible\"\n      title=\"Execution Log\"\n      size=\"40%\"\n    >\n      <template #default>\n        <pre class=\"log\">{{ activeLog || 'No log content' }}</pre>\n      </template>\n      <template #footer>\n        <el-space>\n          <el-button type=\"primary\" @click=\"copyLog\" :disabled=\"!activeLog\">Copy</el-button>\n          <el-button @click=\"logVisible = false\">Close</el-button>\n        </el-space>\n      </template>\n    </el-drawer>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport StatusTag from '@/components/common/StatusTag.vue';\nimport TaskFormDrawer from '@/components/task/TaskFormDrawer.vue';\nimport TaskDependencyGraph from '@/components/task/TaskDependencyGraph.vue';\nimport BaseChart from '@/components/charts/BaseChart.vue';\n\nconst store = useStore();\nconst route = useRoute();\nconst router = useRouter();\n\nconst taskId = route.params.taskId;\nconst drawerVisible = ref(false);\nconst submitting = ref(false);\nconst logVisible = ref(false);\nconst activeLog = ref('');\nconst triggering = ref(false);\nconst detailLoading = ref(false);\nconst chartRange = ref('24h');\n\nconst groupOptions = [\n  { label: 'Data Report', value: 'DATA_REPORT' },\n  { label: 'Realtime Risk', value: 'RISK_CONTROL' },\n  { label: 'Marketing', value: 'MARKETING' },\n  { label: 'Recommendation', value: 'RECOMMEND' }\n];\n\nconst ownerOptions = [\n  { label: 'Alice - Data Platform', value: 'alice' },\n  { label: 'Bob - Marketing', value: 'bob' },\n  { label: 'Carol - Settlement', value: 'carol' },\n  { label: 'David - Recommendation', value: 'david' }\n];\n\nconst tagOptions = ['report', 'risk', 'cache', 'recommend', 'marketing', 'settlement'];\n\nconst parseError = (error) =>\n  error?.response?.data?.message || error?.message || 'Operation failed, please try again later.';\n\nonMounted(async () => {\n  detailLoading.value = true;\n  try {\n    await store.dispatch('tasks/loadTaskDetail', taskId);\n    await loadExecutions();\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  } finally {\n    detailLoading.value = false;\n  }\n});\n\nconst detail = computed(() => store.getters['tasks/currentTask'] || {});\nconst executions = computed(() => store.getters['tasks/taskExecutions'] || []);\nconst executionLoading = computed(() => store.getters['tasks/taskExecutionLoading']);\n\nconst parameterText = computed(() => {\n  const params = detail.value?.parameters;\n  if (!params) return 'No parameters configured';\n  if (typeof params === 'string') return params;\n  try {\n    return JSON.stringify(params, null, 2);\n  } catch (error) {\n    return String(params);\n  }\n});\n\nconst hasExecutionData = computed(\n  () => Array.isArray(executions.value) && executions.value.length > 0\n);\n\nconst executionStats = computed(() => {\n  if (!hasExecutionData.value) return { success: 0, failed: 0 };\n  const success = executions.value.filter((e) => e.status === 'SUCCESS').length;\n  const failed = executions.value.filter((e) => e.status === 'FAILED').length;\n  return { success, failed };\n});\n\nconst successTrendOptions = computed(() => {\n  if (!hasExecutionData.value) return {};\n\n  const sortedExecs = [...executions.value].sort((a, b) => {\n    // 处理对象类型的 triggerTime (OffsetDateTime 对象)\n    const getTimeString = (triggerTime) => {\n      if (!triggerTime) return '';\n      if (typeof triggerTime === 'object') {\n        // 处理 OffsetDateTime 对象格式\n        if (triggerTime.dateTime) {\n          return triggerTime.dateTime;\n        } else if (triggerTime.toString && triggerTime.toString() !== '[object Object]') {\n          return triggerTime.toString();\n        } else if (triggerTime.value) {\n          return triggerTime.value;\n        } else if (triggerTime.date) {\n          return triggerTime.date;\n        }\n        return '';\n      }\n      return triggerTime;\n    };\n    \n    const timeA = getTimeString(a.triggerTime);\n    const timeB = getTimeString(b.triggerTime);\n    \n    // 直接使用字符串比较，避免日期解析问题\n    return timeA.localeCompare(timeB);\n  });\n  \n  // 根据时间范围动态格式化横坐标\n  const formatTimeLabel = (triggerTime) => {\n    if (!triggerTime) return '';\n    \n    // 处理对象类型的 triggerTime (OffsetDateTime 对象)\n    let timeString = triggerTime;\n    if (typeof triggerTime === 'object') {\n      // 处理 OffsetDateTime 对象格式\n      if (triggerTime.dateTime) {\n        // 格式: {dateTime: \"2024-01-15T10:30:00\", offset: {totalSeconds: 28800}}\n        timeString = triggerTime.dateTime;\n      } else if (triggerTime.toString && triggerTime.toString() !== '[object Object]') {\n        timeString = triggerTime.toString();\n      } else if (triggerTime.value) {\n        timeString = triggerTime.value;\n      } else if (triggerTime.date) {\n        timeString = triggerTime.date;\n      } else {\n        // 如果无法转换，返回默认值\n        console.warn('Cannot convert triggerTime object to string:', triggerTime);\n        return 'Invalid Date';\n      }\n    }\n    \n    // 简化的日期处理 - 直接使用字符串截取，避免日期解析问题\n    try {\n      // 如果是 ISO 格式 (2024-01-01T12:00:00+08:00 或 2024-01-01T12:00:00Z)\n      if (timeString.includes('T')) {\n        const datePart = timeString.split('T')[0]; // 2024-01-01\n        const timePart = timeString.split('T')[1]?.split(/[+Z-]/)[0]; // 12:00:00\n        \n        switch (chartRange.value) {\n          case '24h': {\n            // 24小时：显示 HH:mm\n            return timePart ? timePart.substring(0, 5) : '00:00';\n          }\n          case '7d': {\n            // 7天：显示 MM-dd HH:mm\n            const monthDay = datePart.substring(5); // 01-01\n            const hourMin = timePart ? timePart.substring(0, 5) : '00:00';\n            return `${monthDay} ${hourMin}`;\n          }\n          case '30d': {\n            // 30天：显示 MM-dd\n            return datePart.substring(5); // 01-01\n          }\n          default:\n            return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n        }\n      } else {\n        // 如果不是 ISO 格式，使用简单的字符串截取\n        switch (chartRange.value) {\n          case '24h':\n            return timeString.length > 16 ? timeString.substring(11, 16) : timeString;\n          case '7d':\n            return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n          case '30d':\n            return timeString.length > 10 ? timeString.substring(5, 10) : timeString;\n          default:\n            return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n        }\n      }\n    } catch (error) {\n      console.warn('Date formatting error:', error, 'for value:', triggerTime);\n      return timeString.length > 16 ? timeString.substring(5, 16) : timeString;\n    }\n  };\n  \n  const categories = sortedExecs.map(formatTimeLabel);\n  const successData = sortedExecs.map((e) => (e.status === 'SUCCESS' ? 100 : 0));\n  const failedData = sortedExecs.map((e) => (e.status === 'FAILED' ? 100 : 0));\n\n  // 根据时间范围调整标签旋转角度\n  const labelRotation = chartRange.value === '30d' ? 45 : 0;\n\n  return {\n    color: ['#22c55e', '#ef4444'],\n    tooltip: {\n      trigger: 'axis',\n      formatter: (params) =>\n        params.map((p) => `${p.marker}${p.seriesName}: ${p.value}%`).join('<br/>')\n    },\n    legend: {\n      data: ['Success', 'Failed']\n    },\n    grid: { left: 50, right: 24, top: 40, bottom: 50 },\n    xAxis: {\n      type: 'category',\n      data: categories,\n      axisLabel: { \n        rotate: labelRotation, \n        fontSize: 11,\n        interval: chartRange.value === '30d' ? 'auto' : 0\n      }\n    },\n    yAxis: {\n      type: 'value',\n      min: 0,\n      max: 100,\n      axisLabel: { formatter: '{value}%' }\n    },\n    series: [\n      {\n        name: 'Success',\n        type: 'line',\n        smooth: true,\n        areaStyle: { opacity: 0.3 },\n        data: successData\n      },\n      {\n        name: 'Failed',\n        type: 'line',\n        smooth: true,\n        areaStyle: { opacity: 0.3 },\n        data: failedData\n      }\n    ]\n  };\n});\n\nconst durationChartOptions = computed(() => {\n  if (!hasExecutionData.value) return {};\n\n  const sortedExecs = [...executions.value]\n    .sort((a, b) => new Date(a.triggerTime) - new Date(b.triggerTime))\n    .slice(-20);\n\n  const categories = sortedExecs.map((e) => e.triggerTime?.substring(11, 16) || '');\n  const durations = sortedExecs.map((e) => Number(e.duration || 0));\n\n  return {\n    color: ['#f97316'],\n    tooltip: {\n      trigger: 'axis',\n      formatter: (params) => {\n        const p = params[0];\n        return `${p.axisValue}<br/>${p.marker}Duration: ${p.value} ms`;\n      }\n    },\n    grid: { left: 60, right: 24, top: 30, bottom: 60 },\n    xAxis: {\n      type: 'category',\n      data: categories,\n      axisLabel: { rotate: 45, fontSize: 11 }\n    },\n    yAxis: {\n      type: 'value',\n      axisLabel: { formatter: '{value} ms' }\n    },\n    series: [\n      {\n        name: 'Duration',\n        type: 'bar',\n        barMaxWidth: 30,\n        data: durations,\n        itemStyle: {\n          color: (params) => {\n            const val = params.value;\n            if (val < 1000) return '#22c55e';\n            if (val < 5000) return '#f59e0b';\n            return '#ef4444';\n          }\n        }\n      }\n    ]\n  };\n});\n\nconst loadExecutions = async () => {\n  try {\n    await store.dispatch('tasks/loadTaskExecutions', {\n      taskId,\n      page: 1,\n      size: 50,\n      range: chartRange.value\n    });\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  }\n};\n\nconst goBack = () => {\n  router.back();\n};\n\nconst openEdit = () => {\n  drawerVisible.value = true;\n};\n\nconst onDrawerVisible = (visible) => {\n  drawerVisible.value = visible;\n  if (!visible) {\n    submitting.value = false;\n  }\n};\n\nconst submitTask = async (payload) => {\n  submitting.value = true;\n  try {\n    await store.dispatch('tasks/submitTask', payload);\n    await store.dispatch('tasks/loadTaskDetail', taskId);\n    drawerVisible.value = false;\n    ElMessage.success('Task updated');\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  } finally {\n    submitting.value = false;\n  }\n};\n\nconst triggerTask = async () => {\n  if (!detail.value?.id || triggering.value) {\n    return;\n  }\n  triggering.value = true;\n  try {\n    await store.dispatch('tasks/triggerTask', {\n      taskId,\n      payload: {\n        manual: true,\n        operator: store.getters['auth/profile']?.username || 'anonymous'\n      }\n    });\n    ElMessage.success('Execution triggered');\n    setTimeout(loadExecutions, 2000);\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  } finally {\n    triggering.value = false;\n  }\n};\n\nconst confirmDelete = async () => {\n  try {\n    await store.dispatch('tasks/removeTask', taskId);\n    ElMessage.success('Task deleted');\n    router.push('/tasks');\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  }\n};\n\nconst openLog = (record) => {\n  logVisible.value = true;\n  \n  // 构建详细的日志信息\n  const logInfo = {\n    '执行记录ID': record.id || '-',\n    '任务ID': record.taskId || '-',\n    '触发时间': record.triggerTime || '-',\n    '执行节点': record.node || '-',\n    '执行状态': record.status || '-',\n    '执行耗时': record.duration ? `${record.duration}ms` : '-',\n    '重试次数': record.retry || 0,\n    'Trace ID': record.traceId || '-',\n    '执行结果': record.log || 'No execution result',\n    '返回参数': record.parameters ? JSON.stringify(record.parameters, null, 2) : 'No parameters returned'\n  };\n  \n  // 格式化日志显示\n  const formattedLog = Object.entries(logInfo)\n    .map(([key, value]) => `【${key}】\\n${value}`)\n    .join('\\n\\n' + '='.repeat(50) + '\\n\\n');\n  \n  activeLog.value = formattedLog;\n};\n\nconst copyLog = () => {\n  if (!activeLog.value) {\n    return;\n  }\n  navigator.clipboard\n    .writeText(activeLog.value)\n    .then(() => ElMessage.success('Copied to clipboard'))\n    .catch(() => ElMessage.error('Copy failed'));\n};\n\nconst openCronHelper = () => {\n  router.push({ path: '/config', query: { tab: 'cron-tool' } });\n};\n\nconst getDurationTagType = (duration) => {\n  const value = Number(duration || 0);\n  if (value < 1000) return 'success';\n  if (value < 5000) return 'warning';\n  return 'danger';\n};\n\nconst typeLabel = (type) => {\n  const map = {\n    CRON: 'Cron',\n    ONE_TIME: 'One-time',\n    FIXED_RATE: 'Fixed Rate'\n  };\n  return map[type] || type || '-';\n};\n\nconst executorLabel = (executor) => {\n  const map = {\n    HTTP: 'HTTP',\n    GRPC: 'gRPC',\n    SPRING_BEAN: 'Spring Bean',\n    SHELL: 'Shell'\n  };\n  return map[executor] || executor || '-';\n};\n\nconst routeLabel = (route) => {\n  const map = {\n    ROUND_ROBIN: 'Round Robin',\n    CONSISTENT_HASH: 'Consistent Hash',\n    SHARDING: 'Sharding',\n    FIXED_NODE: 'Fixed Node'\n  };\n  return map[route] || route || '-';\n};\n\nconst retryLabel = (retry) => {\n  const map = {\n    NONE: 'None',\n    FIXED_INTERVAL: 'Fixed Interval',\n    EXP_BACKOFF: 'Exponential Backoff'\n  };\n  return map[retry] || retry || 'Fixed Interval';\n};\n\nconst concurrencyLabel = (policy) => {\n  const map = {\n    PARALLEL: 'Parallel',\n    SERIAL: 'Serial',\n    DISCARD: 'Discard'\n  };\n  return map[policy] || policy || 'Parallel';\n};\n</script>\n\n<style scoped lang=\"scss\">\n.task-detail {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  &__title {\n    font-size: 20px;\n    font-weight: 600;\n  }\n}\n\n.content {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 20px;\n}\n\n.detail-card {\n  grid-column: span 2;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  &__section {\n    h3 {\n      margin: 0 0 16px;\n      font-size: 16px;\n      font-weight: 600;\n      color: #0f172a;\n    }\n  }\n}\n\n.chart-card,\n.execution-card,\n.dependency-card {\n  h3 {\n    margin: 0;\n    font-size: 16px;\n    font-weight: 600;\n    color: #0f172a;\n  }\n}\n\n.chart-card__header,\n.execution-card__header,\n.dependency-card__header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n}\n\n.chart-content {\n  min-height: 280px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.chart {\n  width: 100%;\n  height: 280px;\n}\n\n.execution-card {\n  grid-column: span 2;\n}\n\n.dependency-card {\n  grid-column: span 2;\n}\n\n.dependency-timeline {\n  margin-top: 16px;\n}\n\n.dependency-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 13px;\n  color: #475569;\n  flex-wrap: wrap;\n\n  strong {\n    font-weight: 600;\n    color: #1e293b;\n  }\n}\n\n.log {\n  margin: 0;\n  font-family: 'Fira Code', 'Consolas', 'Monaco', monospace;\n  font-size: 13px;\n  line-height: 1.6;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  background: #0f172a;\n  color: #e2e8f0;\n  padding: 16px;\n  border-radius: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}