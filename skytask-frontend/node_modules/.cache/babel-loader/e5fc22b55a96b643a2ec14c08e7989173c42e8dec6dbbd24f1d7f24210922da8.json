{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard__row\"\n};\nconst _hoisted_3 = {\n  class: \"card__header\"\n};\nconst _hoisted_4 = {\n  class: \"card__title\"\n};\nconst _hoisted_5 = {\n  class: \"card__metrics\"\n};\nconst _hoisted_6 = {\n  class: \"card__value\"\n};\nconst _hoisted_7 = {\n  class: \"card__subtitle\"\n};\nconst _hoisted_8 = {\n  class: \"dashboard__row\"\n};\nconst _hoisted_9 = {\n  class: \"panel__header\"\n};\nconst _hoisted_10 = {\n  class: \"trend\"\n};\nconst _hoisted_11 = {\n  class: \"trend__chart\"\n};\nconst _hoisted_12 = {\n  class: \"trend__time\"\n};\nconst _hoisted_13 = {\n  class: \"panel__header\"\n};\nconst _hoisted_14 = {\n  class: \"dashboard__row\"\n};\nconst _hoisted_15 = {\n  class: \"panel__header\"\n};\nconst _hoisted_16 = {\n  class: \"nodes\"\n};\nconst _hoisted_17 = {\n  class: \"nodes__header\"\n};\nconst _hoisted_18 = {\n  class: \"nodes__metrics\"\n};\nconst _hoisted_19 = {\n  class: \"nodes__metric\"\n};\nconst _hoisted_20 = {\n  class: \"nodes__metric\"\n};\nconst _hoisted_21 = {\n  class: \"nodes__meta\"\n};\nconst _hoisted_22 = {\n  class: \"event\"\n};\nconst _hoisted_23 = {\n  class: \"event__title\"\n};\nconst _hoisted_24 = {\n  class: \"event__meta\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_progress = _resolveComponent(\"el-progress\");\n  const _component_el_timeline_item = _resolveComponent(\"el-timeline-item\");\n  const _component_el_timeline = _resolveComponent(\"el-timeline\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"section\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.overviewCards, card => {\n    return _openBlock(), _createBlock(_component_el_card, {\n      key: card.key,\n      shadow: \"hover\",\n      class: \"dashboard__card\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString(card.title), 1 /* TEXT */), _createVNode(_component_el_tag, {\n        type: card.tagType,\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(card.tagText), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString(card.value), 1 /* TEXT */), _createElementVNode(\"span\", {\n        class: _normalizeClass(['card__trend', {\n          'card__trend--down': card.trend < 0\n        }])\n      }, [card.trend >= 0 ? (_openBlock(), _createBlock(_component_el_icon, {\n        key: 0\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"CaretTop\"])]),\n        _: 1 /* STABLE */\n      })) : (_openBlock(), _createBlock(_component_el_icon, {\n        key: 1\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"CaretBottom\"])]),\n        _: 1 /* STABLE */\n      })), _createTextVNode(\" \" + _toDisplayString(Math.abs(card.trend)) + \"% \", 1 /* TEXT */)], 2 /* CLASS */)]), _createElementVNode(\"div\", _hoisted_7, _toDisplayString(card.subtitle), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"section\", _hoisted_8, [_createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [_createElementVNode(\"div\", _hoisted_9, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", null, \"过去 24 小时任务执行趋势\", -1 /* CACHED */)), _createVNode(_component_el_radio_group, {\n      modelValue: $setup.metricRange,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.metricRange = $event),\n      size: \"small\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n        label: \"24h\"\n      }), _createVNode(_component_el_radio_button, {\n        label: \"7d\"\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])])]),\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.trendData, point => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: point.time,\n        class: \"trend__bar\"\n      }, [_createElementVNode(\"span\", {\n        class: \"trend__bar-success\",\n        style: _normalizeStyle({\n          height: point.successRate + '%'\n        })\n      }, null, 4 /* STYLE */), _createElementVNode(\"span\", {\n        class: \"trend__bar-failed\",\n        style: _normalizeStyle({\n          height: point.failedRate + '%'\n        })\n      }, null, 4 /* STYLE */), _createElementVNode(\"span\", _hoisted_12, _toDisplayString(point.time), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))]), _cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n      class: \"trend__legend\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend__item\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend__dot legend__dot--success\"\n    }), _createTextVNode(\" 成功率 \")]), _createElementVNode(\"span\", {\n      class: \"legend__item\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend__dot legend__dot--failed\"\n    }), _createTextVNode(\" 失败率 \")])], -1 /* CACHED */))])]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [_createElementVNode(\"div\", _hoisted_13, [_cache[4] || (_cache[4] = _createElementVNode(\"span\", null, \"Top 告警任务\", -1 /* CACHED */)), _createVNode(_component_el_button, {\n      type: \"primary\",\n      link: \"\",\n      onClick: $setup.navigateToTaskCenter\n    }, {\n      default: _withCtx(() => [...(_cache[3] || (_cache[3] = [_createTextVNode(\"查看全部\", -1 /* CACHED */)]))]),\n      _: 1 /* STABLE */\n    })])]),\n    default: _withCtx(() => [_createVNode(_component_el_table, {\n      data: $setup.topFailedTasks,\n      size: \"small\",\n      height: \"300\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_table_column, {\n        prop: \"name\",\n        label: \"任务名称\",\n        \"min-width\": \"160\",\n        \"show-overflow-tooltip\": \"\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"owner\",\n        label: \"负责人\",\n        width: \"120\"\n      }), _createVNode(_component_el_table_column, {\n        label: \"失败次数\",\n        width: \"100\"\n      }, {\n        default: _withCtx(({\n          row\n        }) => [_createVNode(_component_el_tag, {\n          type: \"danger\",\n          effect: \"dark\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(row.failed), 1 /* TEXT */)]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        label: \"最后失败时间\",\n        width: \"160\"\n      }, {\n        default: _withCtx(({\n          row\n        }) => [_createTextVNode(_toDisplayString(row.lastFailed), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\"])]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"section\", _hoisted_14, [_createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [_createElementVNode(\"div\", _hoisted_15, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", null, \"执行器节点健康度\", -1 /* CACHED */)), _createVNode(_component_el_tag, {\n      type: $setup.nodeHealthTag,\n      size: \"small\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.nodesStatusLabel), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"type\"])])]),\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.nodes, node => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: node.id,\n        class: \"nodes__item\"\n      }, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"span\", null, _toDisplayString(node.name), 1 /* TEXT */), _createVNode(_component_el_tag, {\n        type: node.status === 'ONLINE' ? 'success' : 'danger',\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(node.status === 'ONLINE' ? '在线' : '离线'), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[6] || (_cache[6] = _createElementVNode(\"span\", null, \"CPU\", -1 /* CACHED */)), _createVNode(_component_el_progress, {\n        percentage: node.cpu,\n        status: \"success\"\n      }, null, 8 /* PROPS */, [\"percentage\"])]), _createElementVNode(\"div\", _hoisted_20, [_cache[7] || (_cache[7] = _createElementVNode(\"span\", null, \"内存\", -1 /* CACHED */)), _createVNode(_component_el_progress, {\n        percentage: node.memory,\n        status: \"warning\"\n      }, null, 8 /* PROPS */, [\"percentage\"])]), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"span\", null, \"任务数 \" + _toDisplayString(node.runningTasks), 1 /* TEXT */), _createElementVNode(\"span\", null, \"延迟 \" + _toDisplayString(node.delay) + \"ms\", 1 /* TEXT */)])])]);\n    }), 128 /* KEYED_FRAGMENT */))])]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [...(_cache[8] || (_cache[8] = [_createElementVNode(\"div\", {\n      class: \"panel__header\"\n    }, [_createElementVNode(\"span\", null, \"最新调度事件\")], -1 /* CACHED */)]))]),\n    default: _withCtx(() => [_createVNode(_component_el_timeline, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.recentEvents, event => {\n        return _openBlock(), _createBlock(_component_el_timeline_item, {\n          key: event.id,\n          timestamp: event.time,\n          type: event.type\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"span\", null, _toDisplayString(event.title), 1 /* TEXT */), _createVNode(_component_el_tag, {\n            size: \"small\",\n            type: event.tagType\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(event.tagLabel), 1 /* TEXT */)]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]), _createElementVNode(\"div\", _hoisted_24, _toDisplayString(event.desc), 1 /* TEXT */)])]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"timestamp\", \"type\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","overviewCards","card","_createBlock","_component_el_card","key","shadow","_hoisted_3","_hoisted_4","_toDisplayString","title","_createVNode","_component_el_tag","type","tagType","size","tagText","_hoisted_5","_hoisted_6","value","_normalizeClass","trend","_component_el_icon","Math","abs","_hoisted_7","subtitle","_hoisted_8","header","_withCtx","_hoisted_9","_component_el_radio_group","metricRange","$event","_component_el_radio_button","label","_hoisted_10","_hoisted_11","trendData","point","time","style","_normalizeStyle","height","successRate","failedRate","_hoisted_12","_hoisted_13","_component_el_button","link","onClick","navigateToTaskCenter","_cache","_component_el_table","data","topFailedTasks","_component_el_table_column","prop","width","default","row","effect","failed","lastFailed","_hoisted_14","_hoisted_15","nodeHealthTag","nodesStatusLabel","_hoisted_16","nodes","node","id","_hoisted_17","name","status","_hoisted_18","_hoisted_19","_component_el_progress","percentage","cpu","_hoisted_20","memory","_hoisted_21","runningTasks","delay","_component_el_timeline","recentEvents","event","_component_el_timeline_item","timestamp","_hoisted_22","_hoisted_23","tagLabel","_hoisted_24","desc"],"sources":["D:\\桌面\\项目\\分布式任务调度系统\\SkyTask\\skytask-frontend\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <section class=\"dashboard__row\">\n      <el-card\n        v-for=\"card in overviewCards\"\n        :key=\"card.key\"\n        shadow=\"hover\"\n        class=\"dashboard__card\"\n      >\n        <div class=\"card__header\">\n          <span class=\"card__title\">{{ card.title }}</span>\n          <el-tag :type=\"card.tagType\" size=\"small\">{{ card.tagText }}</el-tag>\n        </div>\n        <div class=\"card__metrics\">\n          <span class=\"card__value\">{{ card.value }}</span>\n          <span :class=\"['card__trend', { 'card__trend--down': card.trend < 0 }]\">\n            <el-icon v-if=\"card.trend >= 0\"><CaretTop /></el-icon>\n            <el-icon v-else><CaretBottom /></el-icon>\n            {{ Math.abs(card.trend) }}%\n          </span>\n        </div>\n        <div class=\"card__subtitle\">{{ card.subtitle }}</div>\n      </el-card>\n    </section>\n\n    <section class=\"dashboard__row\">\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>过去 24 小时任务执行趋势</span>\n            <el-radio-group v-model=\"metricRange\" size=\"small\">\n              <el-radio-button label=\"24h\" />\n              <el-radio-button label=\"7d\" />\n            </el-radio-group>\n          </div>\n        </template>\n        <div class=\"trend\">\n          <div class=\"trend__chart\">\n            <div v-for=\"point in trendData\" :key=\"point.time\" class=\"trend__bar\">\n              <span class=\"trend__bar-success\" :style=\"{ height: point.successRate + '%' }\" />\n              <span class=\"trend__bar-failed\" :style=\"{ height: point.failedRate + '%' }\" />\n              <span class=\"trend__time\">{{ point.time }}</span>\n            </div>\n          </div>\n          <div class=\"trend__legend\">\n            <span class=\"legend__item\">\n              <span class=\"legend__dot legend__dot--success\" />\n              成功率\n            </span>\n            <span class=\"legend__item\">\n              <span class=\"legend__dot legend__dot--failed\" />\n              失败率\n            </span>\n          </div>\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>Top 告警任务</span>\n            <el-button type=\"primary\" link @click=\"navigateToTaskCenter\">查看全部</el-button>\n          </div>\n        </template>\n        <el-table :data=\"topFailedTasks\" size=\"small\" height=\"300\">\n          <el-table-column prop=\"name\" label=\"任务名称\" min-width=\"160\" show-overflow-tooltip />\n          <el-table-column prop=\"owner\" label=\"负责人\" width=\"120\" />\n          <el-table-column label=\"失败次数\" width=\"100\">\n            <template #default=\"{ row }\">\n              <el-tag type=\"danger\" effect=\"dark\">{{ row.failed }}</el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"最后失败时间\" width=\"160\">\n            <template #default=\"{ row }\">{{ row.lastFailed }}</template>\n          </el-table-column>\n        </el-table>\n      </el-card>\n    </section>\n\n    <section class=\"dashboard__row\">\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>执行器节点健康度</span>\n            <el-tag :type=\"nodeHealthTag\" size=\"small\">{{ nodesStatusLabel }}</el-tag>\n          </div>\n        </template>\n        <div class=\"nodes\">\n          <div v-for=\"node in nodes\" :key=\"node.id\" class=\"nodes__item\">\n            <div class=\"nodes__header\">\n              <span>{{ node.name }}</span>\n              <el-tag :type=\"node.status === 'ONLINE' ? 'success' : 'danger'\" size=\"small\">\n                {{ node.status === 'ONLINE' ? '在线' : '离线' }}\n              </el-tag>\n            </div>\n            <div class=\"nodes__metrics\">\n              <div class=\"nodes__metric\">\n                <span>CPU</span>\n                <el-progress :percentage=\"node.cpu\" status=\"success\" />\n              </div>\n              <div class=\"nodes__metric\">\n                <span>内存</span>\n                <el-progress :percentage=\"node.memory\" status=\"warning\" />\n              </div>\n              <div class=\"nodes__meta\">\n                <span>任务数 {{ node.runningTasks }}</span>\n                <span>延迟 {{ node.delay }}ms</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>最新调度事件</span>\n          </div>\n        </template>\n        <el-timeline>\n          <el-timeline-item\n            v-for=\"event in recentEvents\"\n            :key=\"event.id\"\n            :timestamp=\"event.time\"\n            :type=\"event.type\"\n          >\n            <div class=\"event\">\n              <div class=\"event__title\">\n                <span>{{ event.title }}</span>\n                <el-tag size=\"small\" :type=\"event.tagType\">{{ event.tagLabel }}</el-tag>\n              </div>\n              <div class=\"event__meta\">{{ event.desc }}</div>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n      </el-card>\n    </section>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { CaretTop, CaretBottom } from '@element-plus/icons-vue';\n\nconst store = useStore();\nconst router = useRouter();\n\nconst metricRange = ref('24h');\n\nonMounted(() => {\n  store.dispatch('tasks/loadMetrics');\n  store.dispatch('nodes/loadNodeMetrics');\n  store.dispatch('nodes/loadNodes');\n});\n\nwatch(metricRange, (range) => {\n  store.dispatch('tasks/loadMetrics', { range });\n});\n\nconst metrics = computed(() => store.getters['tasks/taskMetrics']);\nconst nodesMetrics = computed(() => store.getters['nodes/nodeMetrics']);\nconst nodes = computed(() => {\n  const list = store.getters['nodes/nodeList'];\n  if (list && list.length) {\n    return list;\n  }\n  return [\n    {\n      id: 'worker-001',\n      name: 'worker-001',\n      status: 'ONLINE',\n      cpu: 45,\n      memory: 58,\n      runningTasks: 34,\n      delay: 120\n    },\n    {\n      id: 'worker-002',\n      name: 'worker-002',\n      status: 'ONLINE',\n      cpu: 63,\n      memory: 70,\n      runningTasks: 27,\n      delay: 98\n    },\n    {\n      id: 'worker-003',\n      name: 'worker-003',\n      status: 'OFFLINE',\n      cpu: 0,\n      memory: 0,\n      runningTasks: 0,\n      delay: 0\n    }\n  ];\n});\n\nconst overviewCards = computed(() => [\n  {\n    key: 'total',\n    title: '任务总数',\n    value: metrics.value.totalTasks,\n    tagType: 'primary',\n    tagText: '全部任务',\n    trend: 8.2,\n    subtitle: '环比昨日增长'\n  },\n  {\n    key: 'success',\n    title: '成功率',\n    value: `${metrics.value.successRate}%`,\n    tagType: 'success',\n    tagText: '今日',\n    trend: 3.1,\n    subtitle: '连续 6 小时保持 > 96%'\n  },\n  {\n    key: 'failed',\n    title: '失败告警',\n    value: metrics.value.failedToday,\n    tagType: 'danger',\n    tagText: '今日累计',\n    trend: -2.4,\n    subtitle: '较昨日下降'\n  },\n  {\n    key: 'backlog',\n    title: '积压任务',\n    value: metrics.value.backlog,\n    tagType: 'warning',\n    tagText: '待处理',\n    trend: 1.8,\n    subtitle: '需关注的任务队列'\n  }\n]);\n\nconst trendData = computed(\n  () =>\n    metrics.value.trend?.length\n      ? metrics.value.trend\n      : [\n          { time: '00:00', successRate: 92, failedRate: 8 },\n          { time: '04:00', successRate: 95, failedRate: 5 },\n          { time: '08:00', successRate: 97, failedRate: 3 },\n          { time: '12:00', successRate: 96, failedRate: 4 },\n          { time: '16:00', successRate: 94, failedRate: 6 },\n          { time: '20:00', successRate: 95, failedRate: 5 }\n        ]\n);\n\nconst topFailedTasks = computed(\n  () =>\n    metrics.value.topFailed?.length\n      ? metrics.value.topFailed\n      : [\n          {\n            id: 'report-01',\n            name: 'nightly-report-generator',\n            owner: 'zhangqiang',\n            failed: 3,\n            lastFailed: '2025-05-08 09:58:42'\n          },\n          {\n            id: 'clean-cache',\n            name: 'clean-global-cache',\n            owner: 'lina',\n            failed: 1,\n            lastFailed: '2025-05-08 07:21:13'\n          }\n        ]\n);\n\nconst nodesStatusLabel = computed(\n  () =>\n    `在线 ${nodesMetrics.value.onlineNodes}/${nodesMetrics.value.totalNodes} • 离线 ${nodesMetrics.value.offlineNodes}`\n);\n\nconst nodeHealthTag = computed(() => {\n  if (nodesMetrics.value.offlineNodes > 0) return 'danger';\n  return 'success';\n});\n\nconst recentEvents = computed(\n  () =>\n    metrics.value.recentEvents || [\n      {\n        id: '1',\n        time: '2025-05-08 10:12:36',\n        type: 'primary',\n        title: '任务 clean-cache 完成',\n        tagLabel: 'SUCCESS',\n        tagType: 'success',\n        desc: '执行节点 worker-001 耗时 12.3s'\n      },\n      {\n        id: '2',\n        time: '2025-05-08 09:58:42',\n        type: 'danger',\n        title: '任务 nightly-report 失败',\n        tagLabel: 'FAILED',\n        tagType: 'danger',\n        desc: '重试 2 次后仍失败，已触发告警'\n      },\n      {\n        id: '3',\n        time: '2025-05-08 09:30:11',\n        type: 'warning',\n        title: '执行节点 worker-003 延迟升高',\n        tagLabel: 'DEGRADED',\n        tagType: 'warning',\n        desc: '调度延迟 420ms，已纳入自愈'\n      }\n    ]\n);\n\nconst navigateToTaskCenter = () => {\n  router.push('/tasks');\n};\n\n</script>\n\n<style scoped lang=\"scss\">\n.dashboard {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  &__row {\n    display: grid;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n    gap: 24px;\n  }\n\n  &__card {\n    border-radius: 16px;\n\n    .card__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 12px;\n    }\n\n    .card__title {\n      font-size: 16px;\n      font-weight: 600;\n      color: #0f172a;\n    }\n\n    .card__metrics {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n\n      .card__value {\n        font-size: 28px;\n        font-weight: 700;\n        color: #111827;\n      }\n\n      .card__trend {\n        display: inline-flex;\n        align-items: center;\n        font-size: 14px;\n        color: #059669;\n\n        &--down {\n          color: #dc2626;\n        }\n      }\n    }\n\n    .card__subtitle {\n      margin-top: 8px;\n      font-size: 13px;\n      color: #64748b;\n    }\n  }\n\n  &__panel {\n    border-radius: 16px;\n\n    .panel__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      font-weight: 600;\n    }\n  }\n}\n\n.trend {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  &__chart {\n    display: flex;\n    align-items: flex-end;\n    gap: 12px;\n    height: 220px;\n  }\n\n  &__bar {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 8px;\n    width: 24px;\n\n    span {\n      width: 12px;\n      border-radius: 6px;\n      transition: height 0.3s ease;\n    }\n  }\n\n  &__bar-success {\n    background: #22c55e;\n  }\n\n  &__bar-failed {\n    background: #ef4444;\n  }\n\n  &__time {\n    font-size: 12px;\n    color: #64748b;\n  }\n\n  &__legend {\n    display: flex;\n    gap: 18px;\n\n    .legend__item {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      font-size: 12px;\n      color: #475569;\n    }\n\n    .legend__dot {\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n\n      &--success {\n        background: #22c55e;\n      }\n\n      &--failed {\n        background: #ef4444;\n      }\n    }\n  }\n}\n\n.nodes {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  &__item {\n    padding: 16px;\n    border: 1px solid rgba(15, 23, 42, 0.08);\n    border-radius: 12px;\n    background: rgba(15, 23, 42, 0.02);\n  }\n\n  &__header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 12px;\n    font-weight: 600;\n    color: #1e293b;\n  }\n\n  &__metrics {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  &__metric {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n    font-size: 13px;\n    color: #475569;\n  }\n\n  &__meta {\n    display: flex;\n    justify-content: space-between;\n    color: #64748b;\n    font-size: 13px;\n  }\n}\n\n.event {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n\n  &__title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-weight: 600;\n  }\n\n  &__meta {\n    font-size: 12px;\n    color: #64748b;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}