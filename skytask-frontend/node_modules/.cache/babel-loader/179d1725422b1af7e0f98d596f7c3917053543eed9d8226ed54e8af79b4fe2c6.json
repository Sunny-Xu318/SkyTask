{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { computed, onMounted, ref } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport StatusTag from '@/components/common/StatusTag.vue';\nimport TaskFormDrawer from '@/components/task/TaskFormDrawer.vue';\nimport TaskDependencyGraph from '@/components/task/TaskDependencyGraph.vue';\nimport BaseChart from '@/components/charts/BaseChart.vue';\nexport default {\n  __name: 'TaskDetailView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const store = useStore();\n    const route = useRoute();\n    const router = useRouter();\n    const taskId = route.params.taskId;\n    const drawerVisible = ref(false);\n    const submitting = ref(false);\n    const logVisible = ref(false);\n    const activeLog = ref('');\n    const triggering = ref(false);\n    const detailLoading = ref(false);\n    const chartRange = ref('24h');\n    const groupOptions = [{\n      label: '数据报表',\n      value: 'DATA_REPORT'\n    }, {\n      label: '实时风控',\n      value: 'RISK_CONTROL'\n    }, {\n      label: '营销中心',\n      value: 'MARKETING'\n    }, {\n      label: '推荐引擎',\n      value: 'RECOMMEND'\n    }];\n    const ownerOptions = [{\n      label: '张强 - 数据平台',\n      value: 'zhangqiang'\n    }, {\n      label: '李娜 - 营销中台',\n      value: 'lina'\n    }, {\n      label: '王伟 - 结算系统',\n      value: 'wangwei'\n    }, {\n      label: '周凯 - 推荐系统',\n      value: 'zhoukai'\n    }];\n    const tagOptions = ['报表', '风控', '缓存', '推荐', '营销', '结算'];\n    const parseError = error => error?.response?.data?.message || error?.message || '加载失败，请稍后重试';\n    onMounted(async () => {\n      detailLoading.value = true;\n      try {\n        await store.dispatch('tasks/loadTaskDetail', taskId);\n        await loadExecutions();\n      } catch (error) {\n        ElMessage.error('加载任务详情失败');\n      } finally {\n        detailLoading.value = false;\n      }\n    });\n    const detail = computed(() => store.getters['tasks/currentTask'] || {});\n    const executions = computed(() => store.getters['tasks/taskExecutions'] || []);\n    const executionLoading = computed(() => store.getters['tasks/taskExecutionLoading']);\n    const parameterText = computed(() => {\n      const params = detail.value?.parameters;\n      if (!params) return '无参数配置';\n      if (typeof params === 'string') return params;\n      try {\n        return JSON.stringify(params, null, 2);\n      } catch (error) {\n        return String(params);\n      }\n    });\n    const hasExecutionData = computed(() => Array.isArray(executions.value) && executions.value.length > 0);\n    const executionStats = computed(() => {\n      if (!hasExecutionData.value) return {\n        success: 0,\n        failed: 0\n      };\n      const success = executions.value.filter(e => e.status === 'SUCCESS').length;\n      const failed = executions.value.filter(e => e.status === 'FAILED').length;\n      return {\n        success,\n        failed\n      };\n    });\n\n    // ECharts配置 - 执行成功率趋势\n    const successTrendOptions = computed(() => {\n      if (!hasExecutionData.value) return {};\n      const sortedExecs = [...executions.value].sort((a, b) => new Date(a.triggerTime) - new Date(b.triggerTime));\n      const categories = sortedExecs.map(e => e.triggerTime?.substring(5, 16) || '');\n      const successData = sortedExecs.map(e => e.status === 'SUCCESS' ? 100 : 0);\n      const failedData = sortedExecs.map(e => e.status === 'FAILED' ? 100 : 0);\n      return {\n        color: ['#22c55e', '#ef4444'],\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            let result = `${params[0].axisValue}<br/>`;\n            params.forEach(p => {\n              result += `${p.marker}${p.seriesName}: ${p.value}%<br/>`;\n            });\n            return result;\n          }\n        },\n        legend: {\n          data: ['成功', '失败']\n        },\n        grid: {\n          left: 50,\n          right: 24,\n          top: 40,\n          bottom: 50\n        },\n        xAxis: {\n          type: 'category',\n          data: categories,\n          axisLabel: {\n            rotate: 45,\n            fontSize: 11\n          }\n        },\n        yAxis: {\n          type: 'value',\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: [{\n          name: '成功',\n          type: 'line',\n          smooth: true,\n          areaStyle: {\n            opacity: 0.3\n          },\n          data: successData\n        }, {\n          name: '失败',\n          type: 'line',\n          smooth: true,\n          areaStyle: {\n            opacity: 0.3\n          },\n          data: failedData\n        }]\n      };\n    });\n\n    // ECharts配置 - 执行耗时分布\n    const durationChartOptions = computed(() => {\n      if (!hasExecutionData.value) return {};\n      const sortedExecs = [...executions.value].sort((a, b) => new Date(a.triggerTime) - new Date(b.triggerTime)).slice(-20); // 最近20条\n\n      const categories = sortedExecs.map(e => e.triggerTime?.substring(11, 16) || '');\n      const durations = sortedExecs.map(e => Number(e.duration || 0));\n      return {\n        color: ['#f97316'],\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            const p = params[0];\n            return `${p.axisValue}<br/>${p.marker}耗时: ${p.value}ms`;\n          }\n        },\n        grid: {\n          left: 60,\n          right: 24,\n          top: 30,\n          bottom: 60\n        },\n        xAxis: {\n          type: 'category',\n          data: categories,\n          axisLabel: {\n            rotate: 45,\n            fontSize: 11\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value}ms'\n          }\n        },\n        series: [{\n          name: '执行耗时',\n          type: 'bar',\n          barMaxWidth: 30,\n          data: durations,\n          itemStyle: {\n            color: params => {\n              const val = params.value;\n              if (val < 1000) return '#22c55e';\n              if (val < 5000) return '#f59e0b';\n              return '#ef4444';\n            }\n          }\n        }]\n      };\n    });\n    const loadExecutions = async () => {\n      try {\n        await store.dispatch('tasks/loadTaskExecutions', {\n          taskId,\n          page: 1,\n          size: 50,\n          range: chartRange.value\n        });\n      } catch (error) {\n        ElMessage.error(parseError(error));\n      }\n    };\n    const goBack = () => {\n      router.back();\n    };\n    const openEdit = () => {\n      drawerVisible.value = true;\n    };\n    const submitTask = async payload => {\n      submitting.value = true;\n      try {\n        await store.dispatch('tasks/submitTask', payload);\n        await store.dispatch('tasks/loadTaskDetail', taskId);\n        drawerVisible.value = false;\n        ElMessage.success('任务更新成功');\n      } catch (error) {\n        ElMessage.error(error?.response?.data?.message || '更新任务失败');\n      } finally {\n        submitting.value = false;\n      }\n    };\n    const triggerTask = async () => {\n      if (!detail.value?.id) return;\n      triggering.value = true;\n      try {\n        await store.dispatch('tasks/triggerTask', {\n          taskId,\n          payload: {\n            manual: true,\n            operator: store.getters['auth/profile']?.username || 'anonymous'\n          }\n        });\n        ElMessage.success('已提交立即执行请求');\n        setTimeout(() => loadExecutions(), 2000);\n      } catch (error) {\n        ElMessage.error(error?.response?.data?.message || '触发任务失败');\n      } finally {\n        triggering.value = false;\n      }\n    };\n    const confirmDelete = async () => {\n      try {\n        await store.dispatch('tasks/removeTask', taskId);\n        ElMessage.success('任务已删除');\n        router.push('/tasks');\n      } catch (error) {\n        ElMessage.error(error?.response?.data?.message || '删除任务失败');\n      }\n    };\n    const openLog = record => {\n      logVisible.value = true;\n      activeLog.value = record.log || '暂无日志内容';\n    };\n    const copyLog = () => {\n      navigator.clipboard.writeText(activeLog.value).then(() => {\n        ElMessage.success('日志已复制到剪贴板');\n      }).catch(() => {\n        ElMessage.error('复制失败');\n      });\n    };\n    const getDurationTagType = duration => {\n      const d = Number(duration || 0);\n      if (d < 1000) return 'success';\n      if (d < 5000) return 'warning';\n      return 'danger';\n    };\n    const typeLabel = type => {\n      const map = {\n        CRON: 'Cron 定时任务',\n        ONE_TIME: '一次性任务',\n        FIXED_RATE: '固定间隔任务'\n      };\n      return map[type] || type || '-';\n    };\n    const executorLabel = executor => {\n      const map = {\n        GRPC: 'gRPC 执行',\n        HTTP: 'HTTP 回调',\n        SPRING_BEAN: 'Spring Bean',\n        SHELL: 'Shell 脚本'\n      };\n      return map[executor] || executor || '-';\n    };\n    const routeLabel = route => {\n      const map = {\n        ROUND_ROBIN: '轮询',\n        CONSISTENT_HASH: '一致性哈希',\n        SHARDING: '分片广播',\n        FIXED_NODE: '指定节点'\n      };\n      return map[route] || route || '轮询';\n    };\n    const retryLabel = retry => {\n      const map = {\n        NONE: '不重试',\n        FIXED_INTERVAL: '固定间隔',\n        EXP_BACKOFF: '指数退避'\n      };\n      return map[retry] || retry || '固定间隔';\n    };\n    const concurrencyLabel = policy => {\n      const map = {\n        PARALLEL: '并行执行',\n        SERIAL: '串行执行',\n        DISCARD: '丢弃后续'\n      };\n      return map[policy] || policy || '并行执行';\n    };\n    const __returned__ = {\n      store,\n      route,\n      router,\n      taskId,\n      drawerVisible,\n      submitting,\n      logVisible,\n      activeLog,\n      triggering,\n      detailLoading,\n      chartRange,\n      groupOptions,\n      ownerOptions,\n      tagOptions,\n      parseError,\n      detail,\n      executions,\n      executionLoading,\n      parameterText,\n      hasExecutionData,\n      executionStats,\n      successTrendOptions,\n      durationChartOptions,\n      loadExecutions,\n      goBack,\n      openEdit,\n      submitTask,\n      triggerTask,\n      confirmDelete,\n      openLog,\n      copyLog,\n      getDurationTagType,\n      typeLabel,\n      executorLabel,\n      routeLabel,\n      retryLabel,\n      concurrencyLabel,\n      computed,\n      onMounted,\n      ref,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      StatusTag,\n      TaskFormDrawer,\n      TaskDependencyGraph,\n      BaseChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","onMounted","ref","useRoute","useRouter","useStore","ElMessage","StatusTag","TaskFormDrawer","TaskDependencyGraph","BaseChart","store","route","router","taskId","params","drawerVisible","submitting","logVisible","activeLog","triggering","detailLoading","chartRange","groupOptions","label","value","ownerOptions","tagOptions","parseError","error","response","data","message","dispatch","loadExecutions","detail","getters","executions","executionLoading","parameterText","parameters","JSON","stringify","String","hasExecutionData","Array","isArray","length","executionStats","success","failed","filter","e","status","successTrendOptions","sortedExecs","sort","a","b","Date","triggerTime","categories","map","substring","successData","failedData","color","tooltip","trigger","formatter","result","axisValue","forEach","p","marker","seriesName","legend","grid","left","right","top","bottom","xAxis","type","axisLabel","rotate","fontSize","yAxis","min","max","series","name","smooth","areaStyle","opacity","durationChartOptions","slice","durations","Number","duration","barMaxWidth","itemStyle","val","page","size","range","goBack","back","openEdit","submitTask","payload","triggerTask","id","manual","operator","username","setTimeout","confirmDelete","push","openLog","record","log","copyLog","navigator","clipboard","writeText","then","catch","getDurationTagType","d","typeLabel","CRON","ONE_TIME","FIXED_RATE","executorLabel","executor","GRPC","HTTP","SPRING_BEAN","SHELL","routeLabel","ROUND_ROBIN","CONSISTENT_HASH","SHARDING","FIXED_NODE","retryLabel","retry","NONE","FIXED_INTERVAL","EXP_BACKOFF","concurrencyLabel","policy","PARALLEL","SERIAL","DISCARD"],"sources":["D:/桌面/项目/分布式任务调度系统/SkyTask/skytask-frontend/src/views/TaskDetailView.vue"],"sourcesContent":["<template>\r\n  <div class=\"task-detail\">\r\n    <el-page-header @back=\"goBack\">\r\n      <template #content>\r\n        <div class=\"header\">\r\n          <span class=\"header__title\">{{ detail?.name || '任务详情' }}</span>\r\n          <StatusTag :status=\"detail?.enabled ? 'SUCCESS' : 'DISABLED'\" />\r\n          <el-tag v-if=\"detail?.group\" type=\"info\" effect=\"plain\">{{ detail.group }}</el-tag>\r\n        </div>\r\n      </template>\r\n      <template #extra>\r\n        <el-space>\r\n          <el-button type=\"primary\" @click=\"triggerTask\" :loading=\"triggering\">\r\n            立即执行\r\n          </el-button>\r\n          <el-button @click=\"openEdit\">编辑任务</el-button>\r\n          <el-popconfirm\r\n            title=\"确认删除该任务？\"\r\n            confirm-button-text=\"确认\"\r\n            cancel-button-text=\"取消\"\r\n            @confirm=\"confirmDelete\"\r\n          >\r\n            <template #reference>\r\n              <el-button type=\"danger\">删除</el-button>\r\n            </template>\r\n          </el-popconfirm>\r\n        </el-space>\r\n      </template>\r\n    </el-page-header>\r\n\r\n    <div v-loading=\"detailLoading\" class=\"content\">\r\n      <!-- 基础信息 -->\r\n      <section class=\"card detail-card\">\r\n        <div class=\"detail-card__section\">\r\n          <h3>基础信息</h3>\r\n          <el-descriptions :column=\"2\" size=\"small\" border>\r\n            <el-descriptions-item label=\"任务 ID\">{{ detail?.id || '-' }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"任务类型\">{{ typeLabel(detail?.type) }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"执行方式\">{{ executorLabel(detail?.executorType) }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"Cron 表达式\">\r\n              <el-tag v-if=\"detail?.cronExpr\" type=\"success\" effect=\"plain\">{{ detail.cronExpr }}</el-tag>\r\n              <span v-else>-</span>\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"负责人\">{{ detail?.owner || '-' }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"超时时间\">{{ detail?.timeout || 300 }} 秒</el-descriptions-item>\r\n            <el-descriptions-item label=\"创建时间\">{{ detail?.createdAt || '-' }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"更新时间\">{{ detail?.updatedAt || '-' }}</el-descriptions-item>\r\n          </el-descriptions>\r\n        </div>\r\n\r\n        <div class=\"detail-card__section\">\r\n          <h3>调度策略</h3>\r\n          <el-descriptions :column=\"2\" size=\"small\" border>\r\n            <el-descriptions-item label=\"路由策略\">{{ routeLabel(detail?.routeStrategy) }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"最大重试\">{{ detail?.maxRetry || 3 }} 次</el-descriptions-item>\r\n            <el-descriptions-item label=\"重试策略\">{{ retryLabel(detail?.retryPolicy) }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"分片数量\">{{ detail?.shardCount || 1 }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"幂等 Key\">{{ detail?.idempotentKey || '无' }}</el-descriptions-item>\r\n            <el-descriptions-item label=\"并发策略\">{{ concurrencyLabel(detail?.concurrencyPolicy) }}</el-descriptions-item>\r\n          </el-descriptions>\r\n        </div>\r\n\r\n        <div class=\"detail-card__section\">\r\n          <h3>任务参数</h3>\r\n          <el-input\r\n            v-model=\"parameterText\"\r\n            type=\"textarea\"\r\n            :rows=\"5\"\r\n            readonly\r\n            placeholder=\"无参数配置\"\r\n          />\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 执行成功率趋势图 -->\r\n      <section class=\"card chart-card\">\r\n        <div class=\"chart-card__header\">\r\n          <h3>执行成功率趋势</h3>\r\n          <el-radio-group v-model=\"chartRange\" size=\"small\" @change=\"loadExecutions\">\r\n            <el-radio-button label=\"24h\">24小时</el-radio-button>\r\n            <el-radio-button label=\"7d\">7天</el-radio-button>\r\n            <el-radio-button label=\"30d\">30天</el-radio-button>\r\n          </el-radio-group>\r\n        </div>\r\n        <div v-loading=\"executionLoading\" class=\"chart-content\">\r\n          <BaseChart v-if=\"hasExecutionData\" :options=\"successTrendOptions\" class=\"chart\" />\r\n          <el-empty v-else description=\"暂无执行数据\" />\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 执行耗时分布图 -->\r\n      <section class=\"card chart-card\">\r\n        <div class=\"chart-card__header\">\r\n          <h3>执行耗时分布</h3>\r\n          <el-tag size=\"small\" type=\"info\">最近20次执行</el-tag>\r\n        </div>\r\n        <div v-loading=\"executionLoading\" class=\"chart-content\">\r\n          <BaseChart v-if=\"hasExecutionData\" :options=\"durationChartOptions\" class=\"chart\" />\r\n          <el-empty v-else description=\"暂无执行数据\" />\r\n        </div>\r\n      </section>\r\n\r\n      <!-- 执行记录表格 -->\r\n      <section class=\"card execution-card\">\r\n        <div class=\"execution-card__header\">\r\n          <h3>最近执行记录</h3>\r\n          <el-space>\r\n            <el-tag size=\"small\">\r\n              成功: {{ executionStats.success }} | 失败: {{ executionStats.failed }}\r\n            </el-tag>\r\n            <el-button size=\"small\" @click=\"loadExecutions\">刷新</el-button>\r\n          </el-space>\r\n        </div>\r\n        <el-table :data=\"executions\" height=\"320\" v-loading=\"executionLoading\">\r\n          <el-table-column prop=\"triggerTime\" label=\"调度时间\" width=\"160\" />\r\n          <el-table-column prop=\"node\" label=\"执行节点\" width=\"140\" show-overflow-tooltip />\r\n          <el-table-column label=\"状态\" width=\"100\">\r\n            <template #default=\"{ row }\">\r\n              <StatusTag :status=\"row.status || 'UNKNOWN'\" />\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"duration\" label=\"耗时\" width=\"100\">\r\n            <template #default=\"{ row }\">\r\n              <el-tag \r\n                :type=\"getDurationTagType(row.duration)\" \r\n                size=\"small\"\r\n              >\r\n                {{ row.duration || 0 }}ms\r\n              </el-tag>\r\n            </template>\r\n          </el-table-column>\r\n          <el-table-column prop=\"attempts\" label=\"重试次数\" width=\"100\" />\r\n          <el-table-column prop=\"traceId\" label=\"TraceId\" min-width=\"140\" show-overflow-tooltip />\r\n          <el-table-column label=\"操作\" width=\"120\" fixed=\"right\">\r\n            <template #default=\"{ row }\">\r\n              <el-button link type=\"primary\" size=\"small\" @click=\"openLog(row)\">\r\n                查看日志\r\n              </el-button>\r\n            </template>\r\n          </el-table-column>\r\n          <template #empty>\r\n            <el-empty description=\"暂无执行记录\" />\r\n          </template>\r\n        </el-table>\r\n      </section>\r\n\r\n      <!-- 任务依赖拓扑 -->\r\n      <section class=\"card dependency-card\">\r\n        <div class=\"dependency-card__header\">\r\n          <h3>任务依赖拓扑</h3>\r\n          <el-tag v-if=\"detail?.dependencies?.length\" size=\"small\" type=\"info\">\r\n            共 {{ detail.dependencies.length }} 个依赖\r\n          </el-tag>\r\n        </div>\r\n        <TaskDependencyGraph\r\n          :task-name=\"detail?.name\"\r\n          :dependencies=\"detail?.dependencies || []\"\r\n        />\r\n        <el-timeline v-if=\"detail?.dependencies?.length\" class=\"dependency-timeline\">\r\n          <el-timeline-item\r\n            v-for=\"dep in detail?.dependencies\"\r\n            :key=\"dep.id\"\r\n            :timestamp=\"dep.triggerType || '前置任务'\"\r\n            :type=\"dep.status === 'SUCCESS' ? 'success' : dep.status === 'FAILED' ? 'danger' : 'info'\"\r\n          >\r\n            <div class=\"dependency-item\">\r\n              <strong>{{ dep.name }}</strong>\r\n              <span>执行节点：{{ dep.node || '-' }}</span>\r\n              <span>任务状态：<StatusTag :status=\"dep.status || 'UNKNOWN'\" /></span>\r\n              <el-tag size=\"small\" v-if=\"dep.cronExpr\" effect=\"plain\">{{ dep.cronExpr }}</el-tag>\r\n            </div>\r\n          </el-timeline-item>\r\n        </el-timeline>\r\n      </section>\r\n    </div>\r\n\r\n    <!-- 编辑抽屉 -->\r\n    <TaskFormDrawer\r\n      v-model:visible=\"drawerVisible\"\r\n      :model-value=\"detail\"\r\n      :group-options=\"groupOptions\"\r\n      :owner-options=\"ownerOptions\"\r\n      :tag-options=\"tagOptions\"\r\n      :submitting=\"submitting\"\r\n      @submit=\"submitTask\"\r\n    />\r\n\r\n    <!-- 日志对话框 -->\r\n    <el-dialog v-model=\"logVisible\" title=\"执行日志\" width=\"70%\" :close-on-click-modal=\"false\">\r\n      <el-scrollbar height=\"500px\">\r\n        <pre class=\"log\">{{ activeLog }}</pre>\r\n      </el-scrollbar>\r\n      <template #footer>\r\n        <el-button @click=\"logVisible = false\">关闭</el-button>\r\n        <el-button type=\"primary\" @click=\"copyLog\">复制日志</el-button>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { computed, onMounted, ref } from 'vue';\r\nimport { useRoute, useRouter } from 'vue-router';\r\nimport { useStore } from 'vuex';\r\nimport { ElMessage } from 'element-plus';\r\nimport StatusTag from '@/components/common/StatusTag.vue';\r\nimport TaskFormDrawer from '@/components/task/TaskFormDrawer.vue';\r\nimport TaskDependencyGraph from '@/components/task/TaskDependencyGraph.vue';\r\nimport BaseChart from '@/components/charts/BaseChart.vue';\r\n\r\nconst store = useStore();\r\nconst route = useRoute();\r\nconst router = useRouter();\r\n\r\nconst taskId = route.params.taskId;\r\nconst drawerVisible = ref(false);\r\nconst submitting = ref(false);\r\nconst logVisible = ref(false);\r\nconst activeLog = ref('');\r\nconst triggering = ref(false);\r\nconst detailLoading = ref(false);\r\nconst chartRange = ref('24h');\r\n\r\nconst groupOptions = [\r\n  { label: '数据报表', value: 'DATA_REPORT' },\r\n  { label: '实时风控', value: 'RISK_CONTROL' },\r\n  { label: '营销中心', value: 'MARKETING' },\r\n  { label: '推荐引擎', value: 'RECOMMEND' }\r\n];\r\n\r\nconst ownerOptions = [\n  { label: '张强 - 数据平台', value: 'zhangqiang' },\n  { label: '李娜 - 营销中台', value: 'lina' },\n  { label: '王伟 - 结算系统', value: 'wangwei' },\n  { label: '周凯 - 推荐系统', value: 'zhoukai' }\n];\n\nconst tagOptions = ['报表', '风控', '缓存', '推荐', '营销', '结算'];\nconst parseError = (error) => error?.response?.data?.message || error?.message || '加载失败，请稍后重试';\n\r\nonMounted(async () => {\r\n  detailLoading.value = true;\r\n  try {\r\n    await store.dispatch('tasks/loadTaskDetail', taskId);\r\n    await loadExecutions();\r\n  } catch (error) {\r\n    ElMessage.error('加载任务详情失败');\r\n  } finally {\r\n    detailLoading.value = false;\r\n  }\r\n});\r\n\r\nconst detail = computed(() => store.getters['tasks/currentTask'] || {});\r\nconst executions = computed(() => store.getters['tasks/taskExecutions'] || []);\r\nconst executionLoading = computed(() => store.getters['tasks/taskExecutionLoading']);\r\n\r\nconst parameterText = computed(() => {\r\n  const params = detail.value?.parameters;\r\n  if (!params) return '无参数配置';\r\n  if (typeof params === 'string') return params;\r\n  try {\r\n    return JSON.stringify(params, null, 2);\r\n  } catch (error) {\r\n    return String(params);\r\n  }\r\n});\r\n\r\nconst hasExecutionData = computed(() => \r\n  Array.isArray(executions.value) && executions.value.length > 0\r\n);\r\n\r\nconst executionStats = computed(() => {\r\n  if (!hasExecutionData.value) return { success: 0, failed: 0 };\r\n  const success = executions.value.filter(e => e.status === 'SUCCESS').length;\r\n  const failed = executions.value.filter(e => e.status === 'FAILED').length;\r\n  return { success, failed };\r\n});\r\n\r\n// ECharts配置 - 执行成功率趋势\r\nconst successTrendOptions = computed(() => {\r\n  if (!hasExecutionData.value) return {};\r\n  \r\n  const sortedExecs = [...executions.value].sort((a, b) => \r\n    new Date(a.triggerTime) - new Date(b.triggerTime)\r\n  );\r\n  \r\n  const categories = sortedExecs.map(e => e.triggerTime?.substring(5, 16) || '');\r\n  const successData = sortedExecs.map(e => e.status === 'SUCCESS' ? 100 : 0);\r\n  const failedData = sortedExecs.map(e => e.status === 'FAILED' ? 100 : 0);\r\n  \r\n  return {\r\n    color: ['#22c55e', '#ef4444'],\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      formatter: (params) => {\r\n        let result = `${params[0].axisValue}<br/>`;\r\n        params.forEach(p => {\r\n          result += `${p.marker}${p.seriesName}: ${p.value}%<br/>`;\r\n        });\r\n        return result;\r\n      }\r\n    },\r\n    legend: {\r\n      data: ['成功', '失败']\r\n    },\r\n    grid: { left: 50, right: 24, top: 40, bottom: 50 },\r\n    xAxis: {\r\n      type: 'category',\r\n      data: categories,\r\n      axisLabel: { rotate: 45, fontSize: 11 }\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      min: 0,\r\n      max: 100,\r\n      axisLabel: { formatter: '{value}%' }\r\n    },\r\n    series: [\r\n      {\r\n        name: '成功',\r\n        type: 'line',\r\n        smooth: true,\r\n        areaStyle: { opacity: 0.3 },\r\n        data: successData\r\n      },\r\n      {\r\n        name: '失败',\r\n        type: 'line',\r\n        smooth: true,\r\n        areaStyle: { opacity: 0.3 },\r\n        data: failedData\r\n      }\r\n    ]\r\n  };\r\n});\r\n\r\n// ECharts配置 - 执行耗时分布\r\nconst durationChartOptions = computed(() => {\r\n  if (!hasExecutionData.value) return {};\r\n  \r\n  const sortedExecs = [...executions.value]\r\n    .sort((a, b) => new Date(a.triggerTime) - new Date(b.triggerTime))\r\n    .slice(-20);  // 最近20条\r\n  \r\n  const categories = sortedExecs.map(e => e.triggerTime?.substring(11, 16) || '');\r\n  const durations = sortedExecs.map(e => Number(e.duration || 0));\r\n  \r\n  return {\r\n    color: ['#f97316'],\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      formatter: (params) => {\r\n        const p = params[0];\r\n        return `${p.axisValue}<br/>${p.marker}耗时: ${p.value}ms`;\r\n      }\r\n    },\r\n    grid: { left: 60, right: 24, top: 30, bottom: 60 },\r\n    xAxis: {\r\n      type: 'category',\r\n      data: categories,\r\n      axisLabel: { rotate: 45, fontSize: 11 }\r\n    },\r\n    yAxis: {\r\n      type: 'value',\r\n      axisLabel: { formatter: '{value}ms' }\r\n    },\r\n    series: [{\r\n      name: '执行耗时',\r\n      type: 'bar',\r\n      barMaxWidth: 30,\r\n      data: durations,\r\n      itemStyle: {\r\n        color: (params) => {\r\n          const val = params.value;\r\n          if (val < 1000) return '#22c55e';\r\n          if (val < 5000) return '#f59e0b';\r\n          return '#ef4444';\r\n        }\r\n      }\r\n    }]\r\n  };\r\n});\r\n\r\nconst loadExecutions = async () => {\n  try {\n    await store.dispatch('tasks/loadTaskExecutions', {\n      taskId,\n      page: 1,\n      size: 50,\n      range: chartRange.value\n    });\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  }\n};\n\r\nconst goBack = () => {\r\n  router.back();\r\n};\r\n\r\nconst openEdit = () => {\r\n  drawerVisible.value = true;\r\n};\r\n\r\nconst submitTask = async (payload) => {\r\n  submitting.value = true;\r\n  try {\r\n    await store.dispatch('tasks/submitTask', payload);\r\n    await store.dispatch('tasks/loadTaskDetail', taskId);\r\n    drawerVisible.value = false;\r\n    ElMessage.success('任务更新成功');\r\n  } catch (error) {\r\n    ElMessage.error(error?.response?.data?.message || '更新任务失败');\r\n  } finally {\r\n    submitting.value = false;\r\n  }\r\n};\r\n\r\nconst triggerTask = async () => {\r\n  if (!detail.value?.id) return;\r\n  \r\n  triggering.value = true;\r\n  try {\r\n    await store.dispatch('tasks/triggerTask', {\r\n      taskId,\r\n      payload: { manual: true, operator: store.getters['auth/profile']?.username || 'anonymous' }\r\n    });\r\n    ElMessage.success('已提交立即执行请求');\r\n    setTimeout(() => loadExecutions(), 2000);\r\n  } catch (error) {\r\n    ElMessage.error(error?.response?.data?.message || '触发任务失败');\r\n  } finally {\r\n    triggering.value = false;\r\n  }\r\n};\r\n\r\nconst confirmDelete = async () => {\r\n  try {\r\n    await store.dispatch('tasks/removeTask', taskId);\r\n    ElMessage.success('任务已删除');\r\n    router.push('/tasks');\r\n  } catch (error) {\r\n    ElMessage.error(error?.response?.data?.message || '删除任务失败');\r\n  }\r\n};\r\n\r\nconst openLog = (record) => {\r\n  logVisible.value = true;\r\n  activeLog.value = record.log || '暂无日志内容';\r\n};\r\n\r\nconst copyLog = () => {\r\n  navigator.clipboard.writeText(activeLog.value).then(() => {\r\n    ElMessage.success('日志已复制到剪贴板');\r\n  }).catch(() => {\r\n    ElMessage.error('复制失败');\r\n  });\r\n};\r\n\r\nconst getDurationTagType = (duration) => {\r\n  const d = Number(duration || 0);\r\n  if (d < 1000) return 'success';\r\n  if (d < 5000) return 'warning';\r\n  return 'danger';\r\n};\r\n\r\nconst typeLabel = (type) => {\r\n  const map = {\r\n    CRON: 'Cron 定时任务',\r\n    ONE_TIME: '一次性任务',\r\n    FIXED_RATE: '固定间隔任务'\r\n  };\r\n  return map[type] || type || '-';\r\n};\r\n\r\nconst executorLabel = (executor) => {\r\n  const map = {\r\n    GRPC: 'gRPC 执行',\r\n    HTTP: 'HTTP 回调',\r\n    SPRING_BEAN: 'Spring Bean',\r\n    SHELL: 'Shell 脚本'\r\n  };\r\n  return map[executor] || executor || '-';\r\n};\r\n\r\nconst routeLabel = (route) => {\r\n  const map = {\r\n    ROUND_ROBIN: '轮询',\r\n    CONSISTENT_HASH: '一致性哈希',\r\n    SHARDING: '分片广播',\r\n    FIXED_NODE: '指定节点'\r\n  };\r\n  return map[route] || route || '轮询';\r\n};\r\n\r\nconst retryLabel = (retry) => {\r\n  const map = {\r\n    NONE: '不重试',\r\n    FIXED_INTERVAL: '固定间隔',\r\n    EXP_BACKOFF: '指数退避'\r\n  };\r\n  return map[retry] || retry || '固定间隔';\r\n};\r\n\r\nconst concurrencyLabel = (policy) => {\r\n  const map = {\r\n    PARALLEL: '并行执行',\r\n    SERIAL: '串行执行',\r\n    DISCARD: '丢弃后续'\r\n  };\r\n  return map[policy] || policy || '并行执行';\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.task-detail {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n}\r\n\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n\r\n  &__title {\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n  }\r\n}\r\n\r\n.content {\r\n  display: grid;\r\n  grid-template-columns: repeat(2, minmax(0, 1fr));\r\n  gap: 20px;\r\n}\r\n\r\n.detail-card {\r\n  grid-column: span 2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 24px;\r\n\r\n  &__section {\r\n    h3 {\r\n      margin: 0 0 16px;\r\n      font-size: 16px;\r\n      font-weight: 600;\r\n      color: #0f172a;\r\n    }\r\n  }\r\n}\r\n\r\n.chart-card,\r\n.execution-card,\r\n.dependency-card {\r\n  h3 {\r\n    margin: 0;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    color: #0f172a;\r\n  }\r\n}\r\n\r\n.chart-card__header,\r\n.execution-card__header,\r\n.dependency-card__header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.chart-content {\r\n  min-height: 280px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.chart {\r\n  width: 100%;\r\n  height: 280px;\r\n}\r\n\r\n.execution-card {\r\n  grid-column: span 2;\r\n}\r\n\r\n.dependency-card {\r\n  grid-column: span 2;\r\n}\r\n\r\n.dependency-timeline {\r\n  margin-top: 16px;\r\n}\r\n\r\n.dependency-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  font-size: 13px;\r\n  color: #475569;\r\n  flex-wrap: wrap;\r\n\r\n  strong {\r\n    font-weight: 600;\r\n    color: #1e293b;\r\n  }\r\n}\r\n\r\n.log {\r\n  margin: 0;\r\n  font-family: 'Fira Code', 'Consolas', 'Monaco', monospace;\r\n  font-size: 13px;\r\n  line-height: 1.6;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n  background: #0f172a;\r\n  color: #e2e8f0;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}