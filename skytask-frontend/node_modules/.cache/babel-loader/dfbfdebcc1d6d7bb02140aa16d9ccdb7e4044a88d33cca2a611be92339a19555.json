{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dashboard\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard__row\"\n};\nconst _hoisted_3 = {\n  class: \"card__header\"\n};\nconst _hoisted_4 = {\n  class: \"card__title\"\n};\nconst _hoisted_5 = {\n  class: \"card__metrics\"\n};\nconst _hoisted_6 = {\n  class: \"card__value\"\n};\nconst _hoisted_7 = {\n  class: \"card__subtitle\"\n};\nconst _hoisted_8 = {\n  class: \"dashboard__row\"\n};\nconst _hoisted_9 = {\n  class: \"panel__header\"\n};\nconst _hoisted_10 = {\n  class: \"trend\"\n};\nconst _hoisted_11 = {\n  class: \"trend__chart\"\n};\nconst _hoisted_12 = {\n  class: \"trend__time\"\n};\nconst _hoisted_13 = {\n  class: \"panel__header\"\n};\nconst _hoisted_14 = {\n  class: \"dashboard__row\"\n};\nconst _hoisted_15 = {\n  class: \"panel__header\"\n};\nconst _hoisted_16 = {\n  class: \"nodes\"\n};\nconst _hoisted_17 = {\n  class: \"nodes__header\"\n};\nconst _hoisted_18 = {\n  class: \"nodes__metrics\"\n};\nconst _hoisted_19 = {\n  class: \"nodes__metric\"\n};\nconst _hoisted_20 = {\n  class: \"nodes__metric\"\n};\nconst _hoisted_21 = {\n  class: \"nodes__meta\"\n};\nconst _hoisted_22 = {\n  class: \"event\"\n};\nconst _hoisted_23 = {\n  class: \"event__title\"\n};\nconst _hoisted_24 = {\n  class: \"event__meta\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_progress = _resolveComponent(\"el-progress\");\n  const _component_el_timeline_item = _resolveComponent(\"el-timeline-item\");\n  const _component_el_timeline = _resolveComponent(\"el-timeline\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"section\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.overviewCards, card => {\n    return _openBlock(), _createBlock(_component_el_card, {\n      key: card.key,\n      shadow: \"hover\",\n      class: \"dashboard__card\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"span\", _hoisted_4, _toDisplayString(card.title), 1 /* TEXT */), _createVNode(_component_el_tag, {\n        type: card.tagType,\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(card.tagText), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"span\", _hoisted_6, _toDisplayString(card.value), 1 /* TEXT */), card.trend !== null ? (_openBlock(), _createElementBlock(\"span\", {\n        key: 0,\n        class: _normalizeClass(['card__trend', {\n          'card__trend--down': card.trend < 0\n        }])\n      }, [card.trend >= 0 ? (_openBlock(), _createBlock(_component_el_icon, {\n        key: 0\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"CaretTop\"])]),\n        _: 1 /* STABLE */\n      })) : (_openBlock(), _createBlock(_component_el_icon, {\n        key: 1\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"CaretBottom\"])]),\n        _: 1 /* STABLE */\n      })), _createTextVNode(\" \" + _toDisplayString(Math.abs(card.trend).toFixed(1)) + \"% \", 1 /* TEXT */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_7, _toDisplayString(card.subtitle), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"section\", _hoisted_8, [_createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [_createElementVNode(\"div\", _hoisted_9, [_cache[1] || (_cache[1] = _createElementVNode(\"span\", null, \"过去 24 小时任务执行趋势\", -1 /* CACHED */)), _createVNode(_component_el_radio_group, {\n      modelValue: $setup.metricRange,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.metricRange = $event),\n      size: \"small\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n        label: \"24h\"\n      }), _createVNode(_component_el_radio_button, {\n        label: \"7d\"\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])])]),\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.trendData, point => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: point.time,\n        class: \"trend__bar\"\n      }, [_createElementVNode(\"span\", {\n        class: \"trend__bar-success\",\n        style: _normalizeStyle({\n          height: point.successRate + '%'\n        })\n      }, null, 4 /* STYLE */), _createElementVNode(\"span\", {\n        class: \"trend__bar-failed\",\n        style: _normalizeStyle({\n          height: point.failedRate + '%'\n        })\n      }, null, 4 /* STYLE */), _createElementVNode(\"span\", _hoisted_12, _toDisplayString(point.time), 1 /* TEXT */)]);\n    }), 128 /* KEYED_FRAGMENT */))]), _cache[2] || (_cache[2] = _createElementVNode(\"div\", {\n      class: \"trend__legend\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend__item\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend__dot legend__dot--success\"\n    }), _createTextVNode(\" 成功率 \")]), _createElementVNode(\"span\", {\n      class: \"legend__item\"\n    }, [_createElementVNode(\"span\", {\n      class: \"legend__dot legend__dot--failed\"\n    }), _createTextVNode(\" 失败率 \")])], -1 /* CACHED */))])]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [_createElementVNode(\"div\", _hoisted_13, [_cache[4] || (_cache[4] = _createElementVNode(\"span\", null, \"Top 告警任务\", -1 /* CACHED */)), _createVNode(_component_el_button, {\n      type: \"primary\",\n      link: \"\",\n      onClick: $setup.navigateToTaskCenter\n    }, {\n      default: _withCtx(() => [...(_cache[3] || (_cache[3] = [_createTextVNode(\"查看全部\", -1 /* CACHED */)]))]),\n      _: 1 /* STABLE */\n    })])]),\n    default: _withCtx(() => [_createVNode(_component_el_table, {\n      data: $setup.topFailedTasks,\n      size: \"small\",\n      height: \"300\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_table_column, {\n        prop: \"name\",\n        label: \"任务名称\",\n        \"min-width\": \"160\",\n        \"show-overflow-tooltip\": \"\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"owner\",\n        label: \"负责人\",\n        width: \"120\"\n      }), _createVNode(_component_el_table_column, {\n        label: \"失败次数\",\n        width: \"100\"\n      }, {\n        default: _withCtx(({\n          row\n        }) => [_createVNode(_component_el_tag, {\n          type: \"danger\",\n          effect: \"dark\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(row.failed), 1 /* TEXT */)]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_table_column, {\n        label: \"最后失败时间\",\n        width: \"160\"\n      }, {\n        default: _withCtx(({\n          row\n        }) => [_createTextVNode(_toDisplayString(row.lastFailed), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\"])]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"section\", _hoisted_14, [_createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [_createElementVNode(\"div\", _hoisted_15, [_cache[5] || (_cache[5] = _createElementVNode(\"span\", null, \"执行器节点健康度\", -1 /* CACHED */)), _createVNode(_component_el_tag, {\n      type: $setup.nodeHealthTag,\n      size: \"small\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString($setup.nodesStatusLabel), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"type\"])])]),\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.nodes, node => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: node.id,\n        class: \"nodes__item\"\n      }, [_createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"span\", null, _toDisplayString(node.name), 1 /* TEXT */), _createVNode(_component_el_tag, {\n        type: node.status === 'ONLINE' ? 'success' : 'danger',\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(node.status === 'ONLINE' ? '在线' : '离线'), 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[6] || (_cache[6] = _createElementVNode(\"span\", null, \"CPU\", -1 /* CACHED */)), _createVNode(_component_el_progress, {\n        percentage: node.cpu,\n        status: \"success\"\n      }, null, 8 /* PROPS */, [\"percentage\"])]), _createElementVNode(\"div\", _hoisted_20, [_cache[7] || (_cache[7] = _createElementVNode(\"span\", null, \"内存\", -1 /* CACHED */)), _createVNode(_component_el_progress, {\n        percentage: node.memory,\n        status: \"warning\"\n      }, null, 8 /* PROPS */, [\"percentage\"])]), _createElementVNode(\"div\", _hoisted_21, [_createElementVNode(\"span\", null, \"任务数 \" + _toDisplayString(node.runningTasks), 1 /* TEXT */), _createElementVNode(\"span\", null, \"延迟 \" + _toDisplayString(node.delay) + \"ms\", 1 /* TEXT */)])])]);\n    }), 128 /* KEYED_FRAGMENT */))])]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_card, {\n    shadow: \"hover\",\n    class: \"dashboard__panel\"\n  }, {\n    header: _withCtx(() => [...(_cache[8] || (_cache[8] = [_createElementVNode(\"div\", {\n      class: \"panel__header\"\n    }, [_createElementVNode(\"span\", null, \"最新调度事件\")], -1 /* CACHED */)]))]),\n    default: _withCtx(() => [_createVNode(_component_el_timeline, null, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.recentEvents, event => {\n        return _openBlock(), _createBlock(_component_el_timeline_item, {\n          key: event.id,\n          timestamp: event.time,\n          type: event.type\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"span\", null, _toDisplayString(event.title), 1 /* TEXT */), _createVNode(_component_el_tag, {\n            size: \"small\",\n            type: event.tagType\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(event.tagLabel), 1 /* TEXT */)]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]), _createElementVNode(\"div\", _hoisted_24, _toDisplayString(event.desc), 1 /* TEXT */)])]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"timestamp\", \"type\"]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","overviewCards","card","_createBlock","_component_el_card","key","shadow","_hoisted_3","_hoisted_4","_toDisplayString","title","_createVNode","_component_el_tag","type","tagType","size","tagText","_hoisted_5","_hoisted_6","value","trend","_normalizeClass","_component_el_icon","Math","abs","toFixed","_hoisted_7","subtitle","_hoisted_8","header","_withCtx","_hoisted_9","_component_el_radio_group","metricRange","$event","_component_el_radio_button","label","_hoisted_10","_hoisted_11","_ctx","trendData","point","time","style","_normalizeStyle","height","successRate","failedRate","_hoisted_12","_hoisted_13","_component_el_button","link","onClick","navigateToTaskCenter","_cache","_component_el_table","data","topFailedTasks","_component_el_table_column","prop","width","default","row","effect","failed","lastFailed","_hoisted_14","_hoisted_15","nodeHealthTag","nodesStatusLabel","_hoisted_16","nodes","node","id","_hoisted_17","name","status","_hoisted_18","_hoisted_19","_component_el_progress","percentage","cpu","_hoisted_20","memory","_hoisted_21","runningTasks","delay","_component_el_timeline","recentEvents","event","_component_el_timeline_item","timestamp","_hoisted_22","_hoisted_23","tagLabel","_hoisted_24","desc"],"sources":["D:\\桌面\\项目\\分布式任务调度系统\\SkyTask\\skytask-frontend\\src\\views\\DashboardView.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <section class=\"dashboard__row\">\n      <el-card\n        v-for=\"card in overviewCards\"\n        :key=\"card.key\"\n        shadow=\"hover\"\n        class=\"dashboard__card\"\n      >\n        <div class=\"card__header\">\n          <span class=\"card__title\">{{ card.title }}</span>\n          <el-tag :type=\"card.tagType\" size=\"small\">{{ card.tagText }}</el-tag>\n        </div>\n        <div class=\"card__metrics\">\n          <span class=\"card__value\">{{ card.value }}</span>\n          <span\n            v-if=\"card.trend !== null\"\n            :class=\"['card__trend', { 'card__trend--down': card.trend < 0 }]\"\n          >\n            <el-icon v-if=\"card.trend >= 0\"><CaretTop /></el-icon>\n            <el-icon v-else><CaretBottom /></el-icon>\n            {{ Math.abs(card.trend).toFixed(1) }}%\n          </span>\n        </div>\n        <div class=\"card__subtitle\">{{ card.subtitle }}</div>\n      </el-card>\n    </section>\n\n    <section class=\"dashboard__row\">\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>过去 24 小时任务执行趋势</span>\n            <el-radio-group v-model=\"metricRange\" size=\"small\">\n              <el-radio-button label=\"24h\" />\n              <el-radio-button label=\"7d\" />\n            </el-radio-group>\n          </div>\n        </template>\n        <div class=\"trend\">\n          <div class=\"trend__chart\">\n            <div v-for=\"point in trendData\" :key=\"point.time\" class=\"trend__bar\">\n              <span class=\"trend__bar-success\" :style=\"{ height: point.successRate + '%' }\" />\n              <span class=\"trend__bar-failed\" :style=\"{ height: point.failedRate + '%' }\" />\n              <span class=\"trend__time\">{{ point.time }}</span>\n            </div>\n          </div>\n          <div class=\"trend__legend\">\n            <span class=\"legend__item\">\n              <span class=\"legend__dot legend__dot--success\" />\n              成功率\n            </span>\n            <span class=\"legend__item\">\n              <span class=\"legend__dot legend__dot--failed\" />\n              失败率\n            </span>\n          </div>\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>Top 告警任务</span>\n            <el-button type=\"primary\" link @click=\"navigateToTaskCenter\">查看全部</el-button>\n          </div>\n        </template>\n        <el-table :data=\"topFailedTasks\" size=\"small\" height=\"300\">\n          <el-table-column prop=\"name\" label=\"任务名称\" min-width=\"160\" show-overflow-tooltip />\n          <el-table-column prop=\"owner\" label=\"负责人\" width=\"120\" />\n          <el-table-column label=\"失败次数\" width=\"100\">\n            <template #default=\"{ row }\">\n              <el-tag type=\"danger\" effect=\"dark\">{{ row.failed }}</el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"最后失败时间\" width=\"160\">\n            <template #default=\"{ row }\">{{ row.lastFailed }}</template>\n          </el-table-column>\n        </el-table>\n      </el-card>\n    </section>\n\n    <section class=\"dashboard__row\">\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>执行器节点健康度</span>\n            <el-tag :type=\"nodeHealthTag\" size=\"small\">{{ nodesStatusLabel }}</el-tag>\n          </div>\n        </template>\n        <div class=\"nodes\">\n          <div v-for=\"node in nodes\" :key=\"node.id\" class=\"nodes__item\">\n            <div class=\"nodes__header\">\n              <span>{{ node.name }}</span>\n              <el-tag :type=\"node.status === 'ONLINE' ? 'success' : 'danger'\" size=\"small\">\n                {{ node.status === 'ONLINE' ? '在线' : '离线' }}\n              </el-tag>\n            </div>\n            <div class=\"nodes__metrics\">\n              <div class=\"nodes__metric\">\n                <span>CPU</span>\n                <el-progress :percentage=\"node.cpu\" status=\"success\" />\n              </div>\n              <div class=\"nodes__metric\">\n                <span>内存</span>\n                <el-progress :percentage=\"node.memory\" status=\"warning\" />\n              </div>\n              <div class=\"nodes__meta\">\n                <span>任务数 {{ node.runningTasks }}</span>\n                <span>延迟 {{ node.delay }}ms</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>最新调度事件</span>\n          </div>\n        </template>\n        <el-timeline>\n          <el-timeline-item\n            v-for=\"event in recentEvents\"\n            :key=\"event.id\"\n            :timestamp=\"event.time\"\n            :type=\"event.type\"\n          >\n            <div class=\"event\">\n              <div class=\"event__title\">\n                <span>{{ event.title }}</span>\n                <el-tag size=\"small\" :type=\"event.tagType\">{{ event.tagLabel }}</el-tag>\n              </div>\n              <div class=\"event__meta\">{{ event.desc }}</div>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n      </el-card>\n    </section>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref, watch } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\nimport { ElMessage } from \"element-plus\";\nimport { CaretBottom, CaretTop } from \"@element-plus/icons-vue\";\nimport BaseChart from \"../components/charts/BaseChart.vue\";\n\nconst router = useRouter();\nconst store = useStore();\n\nconst metricRange = ref(\"24h\");\nconst loadingMetrics = ref(false);\nconst metricError = ref(null);\nconst nodeMetricsLoading = ref(false);\nconst nodeMetricsError = ref(null);\nconst nodeListError = ref(null);\n\nconst parseError = (error) => error?.response?.data?.message || error?.message || \"请求失败\";\nconst isForbidden = (error) => Number(error?.response?.status) === 403;\n\nconst loadTaskMetrics = async (params = {}) => {\n  loadingMetrics.value = true;\n  try {\n    await store.dispatch(\"tasks/loadMetrics\", params);\n    metricError.value = null;\n  } catch (error) {\n    const forbidden = isForbidden(error);\n    metricError.value = {\n      message: forbidden ? \"当前账号无权限查看任务统计\" : parseError(error),\n      forbidden\n    };\n    ElMessage[forbidden ? \"warning\" : \"error\"](metricError.value.message);\n  } finally {\n    loadingMetrics.value = false;\n  }\n};\n\nconst loadNodeMetricsData = async () => {\n  nodeMetricsLoading.value = true;\n  try {\n    await store.dispatch(\"nodes/loadNodeMetrics\");\n    nodeMetricsError.value = null;\n  } catch (error) {\n    const forbidden = isForbidden(error);\n    nodeMetricsError.value = {\n      message: forbidden ? \"当前账号无权限查看节点指标\" : parseError(error),\n      forbidden\n    };\n    ElMessage[forbidden ? \"warning\" : \"error\"](nodeMetricsError.value.message);\n  } finally {\n    nodeMetricsLoading.value = false;\n  }\n};\n\nconst loadNodesData = async () => {\n  try {\n    await store.dispatch(\"nodes/loadNodes\");\n    nodeListError.value = null;\n  } catch (error) {\n    const forbidden = isForbidden(error);\n    nodeListError.value = {\n      message: forbidden ? \"当前账号无权限查看节点列表\" : parseError(error),\n      forbidden\n    };\n    ElMessage[forbidden ? \"warning\" : \"error\"](nodeListError.value.message);\n  }\n};\n\nconst reloadMetrics = () => loadTaskMetrics({ range: metricRange.value });\nconst reloadNodes = () => Promise.all([loadNodeMetricsData(), loadNodesData()]);\n\nonMounted(async () => {\n  await Promise.all([\n    loadTaskMetrics({ range: metricRange.value }),\n    loadNodeMetricsData(),\n    loadNodesData()\n  ]);\n});\n\nwatch(metricRange, (range) => {\n  loadTaskMetrics({ range });\n});\n\nconst metrics = computed(() => store.getters[\"tasks/taskMetrics\"] || {});\nconst nodeMetrics = computed(() => store.getters[\"nodes/nodeMetrics\"] || {});\nconst nodeList = computed(() => store.getters[\"nodes/nodeList\"] || []);\nconst nodesLoading = computed(() => store.getters[\"nodes/nodesLoading\"]);\n\nconst normalizedTrend = computed(() =>\n  (metrics.value.trend || [])\n    .map((item) => ({\n      time: item.time ?? item.timestamp ?? \"\",\n      successRate: Number(item.successRate ?? item.success_rate ?? 0),\n      failedRate: Number(item.failedRate ?? item.failed_rate ?? 0)\n    }))\n    .filter((item) => item.time)\n);\n\nconst trendHasData = computed(() => normalizedTrend.value.length > 0);\n\nconst trendChartOptions = computed(() => {\n  if (!trendHasData.value) {\n    return {};\n  }\n  const categories = normalizedTrend.value.map((item) => item.time);\n  const successSeries = normalizedTrend.value.map((item) => Number(item.successRate.toFixed(2)));\n  const failedSeries = normalizedTrend.value.map((item) => Number(item.failedRate.toFixed(2)));\n  return {\n    color: [\"#22c55e\", \"#ef4444\"],\n    tooltip: {\n      trigger: \"axis\",\n      formatter: (params) =>\n        params.map((p) => `${p.marker}${p.seriesName}: ${Number(p.value).toFixed(2)}%`).join(\"<br/>\")\n    },\n    legend: {\n      data: [\"成功率\", \"失败率\"]\n    },\n    grid: { left: 40, right: 24, top: 30, bottom: 40 },\n    xAxis: {\n      type: \"category\",\n      boundaryGap: false,\n      data: categories\n    },\n    yAxis: {\n      type: \"value\",\n      min: 0,\n      max: 100,\n      axisLabel: { formatter: \"{value}%\" }\n    },\n    series: [\n      {\n        name: \"成功率\",\n        type: \"line\",\n        smooth: true,\n        areaStyle: { opacity: 0.12 },\n        data: successSeries\n      },\n      {\n        name: \"失败率\",\n        type: \"line\",\n        smooth: true,\n        areaStyle: { opacity: 0.08 },\n        data: failedSeries\n      }\n    ]\n  };\n});\n\nconst nodeChartHasData = computed(() => nodeList.value.length > 0);\n\nconst nodeChartOptions = computed(() => {\n  if (!nodeChartHasData.value) {\n    return {};\n  }\n  const names = nodeList.value.map((node) => node.name || node.id);\n  return {\n    color: [\"#38bdf8\", \"#f97316\"],\n    tooltip: { trigger: \"axis\" },\n    legend: { data: [\"CPU\", \"内存\"] },\n    grid: { left: 40, right: 24, top: 30, bottom: 50 },\n    xAxis: { type: \"category\", data: names },\n    yAxis: {\n      type: \"value\",\n      min: 0,\n      max: 100,\n      axisLabel: { formatter: \"{value}%\" }\n    },\n    series: [\n      {\n        name: \"CPU\",\n        type: \"bar\",\n        barMaxWidth: 28,\n        data: nodeList.value.map((node) => Number(node.cpu ?? 0))\n      },\n      {\n        name: \"内存\",\n        type: \"bar\",\n        barMaxWidth: 28,\n        data: nodeList.value.map((node) => Number(node.memory ?? 0))\n      }\n    ]\n  };\n});\n\nconst successTrendDelta = computed(() => {\n  if (!trendHasData.value || normalizedTrend.value.length < 2) {\n    return 0;\n  }\n  const values = normalizedTrend.value.map((item) => item.successRate);\n  return Number((values[values.length - 1] - values[0]).toFixed(1));\n});\n\nconst failureTrendDelta = computed(() => {\n  if (!trendHasData.value || normalizedTrend.value.length < 2) {\n    return 0;\n  }\n  const values = normalizedTrend.value.map((item) => item.failedRate);\n  return Number((values[values.length - 1] - values[0]).toFixed(1));\n});\n\nconst overviewCards = computed(() => {\n  const totalTasks = metrics.value.totalTasks ?? 0;\n  const inactiveTasks = metrics.value.inactiveTasks ?? 0;\n  const successRate = Number(metrics.value.successRate ?? 0).toFixed(1);\n  const failedToday = metrics.value.failedToday ?? 0;\n  const backlog = metrics.value.backlog ?? 0;\n\n  return [\n    {\n      key: \"total\",\n      title: \"任务总数\",\n      value: totalTasks,\n      tagType: \"primary\",\n      tagText: `停用 ${inactiveTasks}`,\n      trend: null,\n      subtitle: \"当前租户下所有任务数量\"\n    },\n    {\n      key: \"success\",\n      title: \"成功率\",\n      value: `${successRate}%`,\n      tagType: \"success\",\n      tagText: metricRange.value === \"7d\" ? \"最近 7 天\" : \"最近 24 小时\",\n      trend: successTrendDelta.value,\n      subtitle: successTrendDelta.value === 0 ? \"暂无波动\" : \"相较起始点的变化\"\n    },\n    {\n      key: \"failed\",\n      title: \"今日失败\",\n      value: failedToday,\n      tagType: \"danger\",\n      tagText: \"累计\",\n      trend: failureTrendDelta.value,\n      subtitle: \"自动降级会在阈值达到时触发\"\n    },\n    {\n      key: \"backlog\",\n      title: \"积压任务\",\n      value: backlog,\n      tagType: \"warning\",\n      tagText: \"待处理\",\n      trend: null,\n      subtitle: \"需要关注的等待或重试任务\"\n    }\n  ];\n});\n\nconst topFailedTasks = computed(() =>\n  (metrics.value.topFailed || []).map((item) => ({\n    id: item.id ?? `${item.name}-${item.taskId ?? \"\"}`,\n    name: item.name ?? \"-\",\n    owner: item.owner ?? \"-\",\n    failed: item.failed ?? 0,\n    lastFailed: item.lastFailed ?? \"-\"\n  }))\n);\n\nconst topFailedHasData = computed(() => topFailedTasks.value.length > 0);\n\nconst recentEvents = computed(() =>\n  (metrics.value.recentEvents || []).map((event) => ({\n    id: event.id ?? `${event.title ?? \"event\"}-${event.time ?? \"\"}`,\n    time: event.time ?? \"-\",\n    type: event.type ?? \"info\",\n    title: event.title ?? \"调度事件\",\n    tagLabel: event.tagLabel ?? \"\",\n    tagType: event.tagType ?? \"info\",\n    desc: event.desc ?? \"\"\n  }))\n);\n\nconst recentEventsHasData = computed(() => recentEvents.value.length > 0);\n\nconst nodesStatusLabel = computed(() => {\n  const online = nodeMetrics.value.onlineNodes ?? 0;\n  const total = nodeMetrics.value.totalNodes ?? 0;\n  const offline = nodeMetrics.value.offlineNodes ?? 0;\n  return `在线 ${online}/${total} | 离线 ${offline}`;\n});\n\nconst nodeHealthTag = computed(() => (nodeMetrics.value.offlineNodes > 0 ? \"danger\" : \"success\"));\nconst nodePanelError = computed(() => nodeMetricsError.value || nodeListError.value);\n\nconst navigateToTaskCenter = () => {\n  router.push(\"/tasks\");\n};\n</script>\n\n<style scoped lang=\"scss\">\n.dashboard {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  &__row {\n    display: grid;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n    gap: 24px;\n  }\n\n  &__card {\n    border-radius: 16px;\n\n    .card__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 12px;\n    }\n\n    .card__title {\n      font-size: 16px;\n      font-weight: 600;\n      color: #0f172a;\n    }\n\n    .card__metrics {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n\n      .card__value {\n        font-size: 28px;\n        font-weight: 700;\n        color: #111827;\n      }\n\n      .card__trend {\n        display: inline-flex;\n        align-items: center;\n        font-size: 14px;\n        color: #059669;\n\n        &--down {\n          color: #dc2626;\n        }\n      }\n    }\n\n    .card__subtitle {\n      margin-top: 8px;\n      font-size: 13px;\n      color: #64748b;\n    }\n  }\n\n  &__panel {\n    border-radius: 16px;\n\n    .panel__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      font-weight: 600;\n    }\n  }\n}\n\n.trend {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  &__chart {\n    display: flex;\n    align-items: flex-end;\n    gap: 12px;\n    height: 220px;\n  }\n\n  &__bar {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 8px;\n    width: 24px;\n\n    span {\n      width: 12px;\n      border-radius: 6px;\n      transition: height 0.3s ease;\n    }\n  }\n\n  &__bar-success {\n    background: #22c55e;\n  }\n\n  &__bar-failed {\n    background: #ef4444;\n  }\n\n  &__time {\n    font-size: 12px;\n    color: #64748b;\n  }\n\n  &__legend {\n    display: flex;\n    gap: 18px;\n\n    .legend__item {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      font-size: 12px;\n      color: #475569;\n    }\n\n    .legend__dot {\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n\n      &--success {\n        background: #22c55e;\n      }\n\n      &--failed {\n        background: #ef4444;\n      }\n    }\n  }\n}\n\n.nodes {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  &__item {\n    padding: 16px;\n    border: 1px solid rgba(15, 23, 42, 0.08);\n    border-radius: 12px;\n    background: rgba(15, 23, 42, 0.02);\n  }\n\n  &__header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 12px;\n    font-weight: 600;\n    color: #1e293b;\n  }\n\n  &__metrics {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  &__metric {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n    font-size: 13px;\n    color: #475569;\n  }\n\n  &__meta {\n    display: flex;\n    justify-content: space-between;\n    color: #64748b;\n    font-size: 13px;\n  }\n}\n\n.event {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n\n  &__title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-weight: 600;\n  }\n\n  &__meta {\n    font-size: 12px;\n    color: #64748b;\n  }\n}\n</style>\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}