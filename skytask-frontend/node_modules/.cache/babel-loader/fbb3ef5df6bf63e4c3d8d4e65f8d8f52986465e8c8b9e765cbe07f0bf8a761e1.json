{"ast":null,"code":"import { fetchNodeList, fetchNodeMetrics, offlineNode, rebalanceShards } from '../../api/nodes';\nconst state = () => ({\n  nodes: [],\n  metrics: {\n    totalNodes: 0,\n    onlineNodes: 0,\n    offlineNodes: 0,\n    avgCpu: 0,\n    avgMemory: 0\n  },\n  loading: false\n});\nconst mutations = {\n  SET_NODES(state, nodes) {\n    state.nodes = nodes;\n  },\n  SET_METRICS(state, metrics) {\n    state.metrics = {\n      ...state.metrics,\n      ...metrics\n    };\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  }\n};\nconst actions = {\n  async loadNodeMetrics({\n    commit\n  }) {\n    const metrics = (await fetchNodeMetrics()) || {};\n    commit('SET_METRICS', metrics);\n  },\n  async loadNodes({\n    commit\n  }) {\n    commit('SET_LOADING', true);\n    try {\n      const nodes = (await fetchNodeList()) || [];\n      commit('SET_NODES', nodes);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async decommissionNode({\n    dispatch\n  }, nodeId) {\n    await offlineNode(nodeId);\n    await dispatch('loadNodes');\n  },\n  async rebalance({\n    dispatch\n  }, nodeId) {\n    await rebalanceShards(nodeId);\n    await dispatch('loadNodes');\n  }\n};\nconst getters = {\n  nodeMetrics: state => state.metrics,\n  nodeList: state => state.nodes,\n  nodesLoading: state => state.loading\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["fetchNodeList","fetchNodeMetrics","offlineNode","rebalanceShards","state","nodes","metrics","totalNodes","onlineNodes","offlineNodes","avgCpu","avgMemory","loading","mutations","SET_NODES","SET_METRICS","SET_LOADING","actions","loadNodeMetrics","commit","loadNodes","decommissionNode","dispatch","nodeId","rebalance","getters","nodeMetrics","nodeList","nodesLoading","namespaced"],"sources":["D:/桌面/项目/分布式任务调度系统/SkyTask/skytask-frontend/src/store/modules/nodes.js"],"sourcesContent":["import { fetchNodeList, fetchNodeMetrics, offlineNode, rebalanceShards } from '../../api/nodes';\n\nconst state = () => ({\n  nodes: [],\n  metrics: {\n    totalNodes: 0,\n    onlineNodes: 0,\n    offlineNodes: 0,\n    avgCpu: 0,\n    avgMemory: 0\n  },\n  loading: false\n});\n\nconst mutations = {\n  SET_NODES(state, nodes) {\n    state.nodes = nodes;\n  },\n  SET_METRICS(state, metrics) {\n    state.metrics = { ...state.metrics, ...metrics };\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  }\n};\n\nconst actions = {\n  async loadNodeMetrics({ commit }) {\n    const metrics = (await fetchNodeMetrics()) || {};\n    commit('SET_METRICS', metrics);\n  },\n  async loadNodes({ commit }) {\n    commit('SET_LOADING', true);\n    try {\n      const nodes = (await fetchNodeList()) || [];\n      commit('SET_NODES', nodes);\n    } finally {\n      commit('SET_LOADING', false);\n    }\n  },\n  async decommissionNode({ dispatch }, nodeId) {\n    await offlineNode(nodeId);\n    await dispatch('loadNodes');\n  },\n  async rebalance({ dispatch }, nodeId) {\n    await rebalanceShards(nodeId);\n    await dispatch('loadNodes');\n  }\n};\n\nconst getters = {\n  nodeMetrics: (state) => state.metrics,\n  nodeList: (state) => state.nodes,\n  nodesLoading: (state) => state.loading\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,gBAAgB,EAAEC,WAAW,EAAEC,eAAe,QAAQ,iBAAiB;AAE/F,MAAMC,KAAK,GAAGA,CAAA,MAAO;EACnBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE;IACPC,UAAU,EAAE,CAAC;IACbC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IACfC,MAAM,EAAE,CAAC;IACTC,SAAS,EAAE;EACb,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAG;EAChBC,SAASA,CAACV,KAAK,EAAEC,KAAK,EAAE;IACtBD,KAAK,CAACC,KAAK,GAAGA,KAAK;EACrB,CAAC;EACDU,WAAWA,CAACX,KAAK,EAAEE,OAAO,EAAE;IAC1BF,KAAK,CAACE,OAAO,GAAG;MAAE,GAAGF,KAAK,CAACE,OAAO;MAAE,GAAGA;IAAQ,CAAC;EAClD,CAAC;EACDU,WAAWA,CAACZ,KAAK,EAAEQ,OAAO,EAAE;IAC1BR,KAAK,CAACQ,OAAO,GAAGA,OAAO;EACzB;AACF,CAAC;AAED,MAAMK,OAAO,GAAG;EACd,MAAMC,eAAeA,CAAC;IAAEC;EAAO,CAAC,EAAE;IAChC,MAAMb,OAAO,GAAG,CAAC,MAAML,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC;IAChDkB,MAAM,CAAC,aAAa,EAAEb,OAAO,CAAC;EAChC,CAAC;EACD,MAAMc,SAASA,CAAC;IAAED;EAAO,CAAC,EAAE;IAC1BA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;IAC3B,IAAI;MACF,MAAMd,KAAK,GAAG,CAAC,MAAML,aAAa,CAAC,CAAC,KAAK,EAAE;MAC3CmB,MAAM,CAAC,WAAW,EAAEd,KAAK,CAAC;IAC5B,CAAC,SAAS;MACRc,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;IAC9B;EACF,CAAC;EACD,MAAME,gBAAgBA,CAAC;IAAEC;EAAS,CAAC,EAAEC,MAAM,EAAE;IAC3C,MAAMrB,WAAW,CAACqB,MAAM,CAAC;IACzB,MAAMD,QAAQ,CAAC,WAAW,CAAC;EAC7B,CAAC;EACD,MAAME,SAASA,CAAC;IAAEF;EAAS,CAAC,EAAEC,MAAM,EAAE;IACpC,MAAMpB,eAAe,CAACoB,MAAM,CAAC;IAC7B,MAAMD,QAAQ,CAAC,WAAW,CAAC;EAC7B;AACF,CAAC;AAED,MAAMG,OAAO,GAAG;EACdC,WAAW,EAAGtB,KAAK,IAAKA,KAAK,CAACE,OAAO;EACrCqB,QAAQ,EAAGvB,KAAK,IAAKA,KAAK,CAACC,KAAK;EAChCuB,YAAY,EAAGxB,KAAK,IAAKA,KAAK,CAACQ;AACjC,CAAC;AAED,eAAe;EACbiB,UAAU,EAAE,IAAI;EAChBzB,KAAK;EACLS,SAAS;EACTI,OAAO;EACPQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}