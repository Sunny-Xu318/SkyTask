{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, resolveDirective as _resolveDirective, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"task-detail\"\n};\nconst _hoisted_2 = {\n  class: \"header\"\n};\nconst _hoisted_3 = {\n  class: \"header__title\"\n};\nconst _hoisted_4 = {\n  class: \"content\"\n};\nconst _hoisted_5 = {\n  class: \"card detail-card\"\n};\nconst _hoisted_6 = {\n  class: \"detail-card__section\"\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  class: \"detail-card__section\"\n};\nconst _hoisted_9 = {\n  class: \"detail-card__section\"\n};\nconst _hoisted_10 = {\n  class: \"card chart-card\"\n};\nconst _hoisted_11 = {\n  class: \"chart-card__header\"\n};\nconst _hoisted_12 = {\n  class: \"chart-content\"\n};\nconst _hoisted_13 = {\n  class: \"card chart-card\"\n};\nconst _hoisted_14 = {\n  class: \"chart-card__header\"\n};\nconst _hoisted_15 = {\n  class: \"chart-content\"\n};\nconst _hoisted_16 = {\n  class: \"card execution-card\"\n};\nconst _hoisted_17 = {\n  class: \"execution-card__header\"\n};\nconst _hoisted_18 = {\n  class: \"card dependency-card\"\n};\nconst _hoisted_19 = {\n  class: \"dependency-card__header\"\n};\nconst _hoisted_20 = {\n  class: \"dependency-item\"\n};\nconst _hoisted_21 = {\n  class: \"log\"\n};\nexport function render(_ctx, _cache) {\n  const _component_StatusTag = _resolveComponent(\"StatusTag\");\n  const _component_el_tag = _resolveComponent(\"el-tag\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_popconfirm = _resolveComponent(\"el-popconfirm\");\n  const _component_el_space = _resolveComponent(\"el-space\");\n  const _component_el_page_header = _resolveComponent(\"el-page-header\");\n  const _component_el_descriptions_item = _resolveComponent(\"el-descriptions-item\");\n  const _component_el_descriptions = _resolveComponent(\"el-descriptions\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_BaseChart = _resolveComponent(\"BaseChart\");\n  const _component_el_empty = _resolveComponent(\"el-empty\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_TaskDependencyGraph = _resolveComponent(\"TaskDependencyGraph\");\n  const _component_el_timeline_item = _resolveComponent(\"el-timeline-item\");\n  const _component_el_timeline = _resolveComponent(\"el-timeline\");\n  const _component_TaskFormDrawer = _resolveComponent(\"TaskFormDrawer\");\n  const _component_el_drawer = _resolveComponent(\"el-drawer\");\n  const _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_page_header, {\n    onBack: _ctx.goBack\n  }, {\n    content: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"span\", _hoisted_3, _toDisplayString(_ctx.detail?.name || '任务详情'), 1 /* TEXT */), _createVNode(_component_StatusTag, {\n      status: _ctx.detail?.enabled ? 'SUCCESS' : 'DISABLED'\n    }, null, 8 /* PROPS */, [\"status\"]), _ctx.detail?.group ? (_openBlock(), _createBlock(_component_el_tag, {\n      key: 0,\n      type: \"info\",\n      effect: \"plain\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail.group), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    })) : _createCommentVNode(\"v-if\", true)])]),\n    extra: _withCtx(() => [_createVNode(_component_el_space, null, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        loading: _ctx.triggering,\n        onClick: _ctx.triggerTask\n      }, {\n        default: _withCtx(() => [...(_cache[5] || (_cache[5] = [_createTextVNode(\"立即运行\", -1 /* CACHED */)]))]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"loading\", \"onClick\"]), _createVNode(_component_el_button, {\n        onClick: _ctx.openEdit\n      }, {\n        default: _withCtx(() => [...(_cache[6] || (_cache[6] = [_createTextVNode(\"编辑任务\", -1 /* CACHED */)]))]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_popconfirm, {\n        title: \"确定删除此任务吗？\",\n        \"confirm-button-text\": \"确认\",\n        \"cancel-button-text\": \"取消\",\n        onConfirm: _ctx.confirmDelete\n      }, {\n        reference: _withCtx(() => [_createVNode(_component_el_button, {\n          type: \"danger\"\n        }, {\n          default: _withCtx(() => [...(_cache[7] || (_cache[7] = [_createTextVNode(\"删除\", -1 /* CACHED */)]))]),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onConfirm\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onBack\"]), _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"section\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[8] || (_cache[8] = _createElementVNode(\"h3\", null, \"基本信息\", -1 /* CACHED */)), _createVNode(_component_el_descriptions, {\n    column: 2,\n    size: \"small\",\n    border: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_descriptions_item, {\n      label: \"任务ID\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.id || '-'), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"任务类型\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.typeLabel(_ctx.detail?.type)), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"执行器\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.executorLabel(_ctx.detail?.executorType)), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"Cron表达式\"\n    }, {\n      default: _withCtx(() => [_ctx.detail?.cronExpr ? (_openBlock(), _createBlock(_component_el_tag, {\n        key: 0,\n        type: \"success\",\n        effect: \"plain\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail.cronExpr), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      })) : (_openBlock(), _createElementBlock(\"span\", _hoisted_7, \"-\"))]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"负责人\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.owner || '-'), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"超时时间\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.timeout || 300) + \" 秒\", 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"创建时间\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.createdAt || '-'), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"更新时间\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.updatedAt || '-'), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"div\", _hoisted_8, [_cache[9] || (_cache[9] = _createElementVNode(\"h3\", null, \"调度策略\", -1 /* CACHED */)), _createVNode(_component_el_descriptions, {\n    column: 2,\n    size: \"small\",\n    border: \"\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_descriptions_item, {\n      label: \"路由策略\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.routeLabel(_ctx.detail?.routeStrategy)), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"最大重试次数\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.maxRetry ?? 0), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"重试策略\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.retryLabel(_ctx.detail?.retryPolicy)), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"分片数\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.shardCount ?? 1), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"幂等键\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail?.idempotentKey || '-'), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_descriptions_item, {\n      label: \"并发策略\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.concurrencyLabel(_ctx.detail?.concurrencyPolicy)), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]), _createElementVNode(\"div\", _hoisted_9, [_cache[10] || (_cache[10] = _createElementVNode(\"h3\", null, \"任务参数\", -1 /* CACHED */)), _createVNode(_component_el_input, {\n    modelValue: _ctx.parameterText,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.parameterText = $event),\n    type: \"textarea\",\n    rows: 5,\n    readonly: \"\",\n    placeholder: \"未配置参数\"\n  }, null, 8 /* PROPS */, [\"modelValue\"])])]), _createElementVNode(\"section\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_cache[14] || (_cache[14] = _createElementVNode(\"h3\", null, \"执行成功趋势\", -1 /* CACHED */)), _createVNode(_component_el_radio_group, {\n    modelValue: _ctx.chartRange,\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.chartRange = $event),\n    size: \"small\",\n    onChange: _ctx.loadExecutions\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n      label: \"24h\"\n    }, {\n      default: _withCtx(() => [...(_cache[11] || (_cache[11] = [_createTextVNode(\"24小时\", -1 /* CACHED */)]))]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_radio_button, {\n      label: \"7d\"\n    }, {\n      default: _withCtx(() => [...(_cache[12] || (_cache[12] = [_createTextVNode(\"7天\", -1 /* CACHED */)]))]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_radio_button, {\n      label: \"30d\"\n    }, {\n      default: _withCtx(() => [...(_cache[13] || (_cache[13] = [_createTextVNode(\"30天\", -1 /* CACHED */)]))]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]), _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_ctx.hasExecutionData ? (_openBlock(), _createBlock(_component_BaseChart, {\n    key: 0,\n    options: _ctx.successTrendOptions,\n    class: \"chart\"\n  }, null, 8 /* PROPS */, [\"options\"])) : (_openBlock(), _createBlock(_component_el_empty, {\n    key: 1,\n    description: \"暂无执行数据\"\n  }))])), [[_directive_loading, _ctx.executionLoading]])]), _createElementVNode(\"section\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_cache[16] || (_cache[16] = _createElementVNode(\"h3\", null, \"执行耗时（最近20次）\", -1 /* CACHED */)), _createVNode(_component_el_tag, {\n    size: \"small\",\n    type: \"info\"\n  }, {\n    default: _withCtx(() => [...(_cache[15] || (_cache[15] = [_createTextVNode(\"最近20次执行\", -1 /* CACHED */)]))]),\n    _: 1 /* STABLE */\n  })]), _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_15, [_ctx.hasExecutionData ? (_openBlock(), _createBlock(_component_BaseChart, {\n    key: 0,\n    options: _ctx.durationChartOptions,\n    class: \"chart\"\n  }, null, 8 /* PROPS */, [\"options\"])) : (_openBlock(), _createBlock(_component_el_empty, {\n    key: 1,\n    description: \"暂无执行数据\"\n  }))])), [[_directive_loading, _ctx.executionLoading]])]), _createElementVNode(\"section\", _hoisted_16, [_createElementVNode(\"div\", _hoisted_17, [_cache[18] || (_cache[18] = _createElementVNode(\"h3\", null, \"最近执行记录\", -1 /* CACHED */)), _createVNode(_component_el_space, null, {\n    default: _withCtx(() => [_createVNode(_component_el_tag, {\n      size: \"small\"\n    }, {\n      default: _withCtx(() => [_createTextVNode(\" 成功: \" + _toDisplayString(_ctx.executionStats.success) + \" | 失败: \" + _toDisplayString(_ctx.executionStats.failed), 1 /* TEXT */)]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_button, {\n      size: \"small\",\n      onClick: _ctx.loadExecutions\n    }, {\n      default: _withCtx(() => [...(_cache[17] || (_cache[17] = [_createTextVNode(\"刷新\", -1 /* CACHED */)]))]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])]),\n    _: 1 /* STABLE */\n  })]), _withDirectives((_openBlock(), _createBlock(_component_el_table, {\n    data: _ctx.executions,\n    height: \"320\"\n  }, {\n    empty: _withCtx(() => [_createVNode(_component_el_empty, {\n      description: \"暂无执行记录\"\n    })]),\n    default: _withCtx(() => [_createVNode(_component_el_table_column, {\n      prop: \"triggerTime\",\n      label: \"触发时间\",\n      width: \"160\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"node\",\n      label: \"执行节点\",\n      width: \"140\",\n      \"show-overflow-tooltip\": \"\"\n    }), _createVNode(_component_el_table_column, {\n      label: \"状态\",\n      width: \"110\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [_createVNode(_component_StatusTag, {\n        status: row.status || 'UNKNOWN'\n      }, null, 8 /* PROPS */, [\"status\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_table_column, {\n      prop: \"duration\",\n      label: \"耗时\",\n      width: \"110\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [_createVNode(_component_el_tag, {\n        type: _ctx.getDurationTagType(row.duration),\n        size: \"small\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(row.duration || 0) + \" ms \", 1 /* TEXT */)]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"type\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_el_table_column, {\n      prop: \"retry\",\n      label: \"重试\",\n      width: \"80\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"traceId\",\n      label: \"追踪ID\",\n      \"min-width\": \"160\",\n      \"show-overflow-tooltip\": \"\"\n    }), _createVNode(_component_el_table_column, {\n      label: \"操作\",\n      width: \"110\",\n      fixed: \"right\"\n    }, {\n      default: _withCtx(({\n        row\n      }) => [_createVNode(_component_el_button, {\n        link: \"\",\n        type: \"primary\",\n        size: \"small\",\n        onClick: $event => _ctx.openLog(row)\n      }, {\n        default: _withCtx(() => [...(_cache[19] || (_cache[19] = [_createTextVNode(\"查看日志\", -1 /* CACHED */)]))]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\"])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"])), [[_directive_loading, _ctx.executionLoading]])]), _createElementVNode(\"section\", _hoisted_18, [_createElementVNode(\"div\", _hoisted_19, [_cache[20] || (_cache[20] = _createElementVNode(\"h3\", null, \"上游依赖\", -1 /* CACHED */)), _ctx.detail?.dependencies?.length ? (_openBlock(), _createBlock(_component_el_tag, {\n    key: 0,\n    size: \"small\",\n    type: \"info\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.detail.dependencies.length) + \" 个任务 \", 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  })) : _createCommentVNode(\"v-if\", true)]), _createVNode(_component_TaskDependencyGraph, {\n    \"task-name\": _ctx.detail?.name,\n    dependencies: _ctx.detail?.dependencies || []\n  }, null, 8 /* PROPS */, [\"task-name\", \"dependencies\"]), _ctx.detail?.dependencies?.length ? (_openBlock(), _createBlock(_component_el_timeline, {\n    key: 0,\n    class: \"dependency-timeline\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.detail.dependencies, dep => {\n      return _openBlock(), _createBlock(_component_el_timeline_item, {\n        key: dep.id,\n        timestamp: dep.triggerType || '手动',\n        type: dep.status === 'SUCCESS' ? 'success' : dep.status === 'FAILED' ? 'danger' : 'info'\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_20, [_createElementVNode(\"strong\", null, _toDisplayString(dep.name), 1 /* TEXT */), _createElementVNode(\"span\", null, \"节点: \" + _toDisplayString(dep.node || '-'), 1 /* TEXT */), _createElementVNode(\"span\", null, [_cache[21] || (_cache[21] = _createTextVNode(\"状态: \", -1 /* CACHED */)), _createVNode(_component_StatusTag, {\n          status: dep.status || 'UNKNOWN'\n        }, null, 8 /* PROPS */, [\"status\"])]), dep.cronExpr ? (_openBlock(), _createBlock(_component_el_tag, {\n          key: 0,\n          size: \"small\",\n          effect: \"plain\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(dep.cronExpr), 1 /* TEXT */)]),\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true)])]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"timestamp\", \"type\"]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n    _: 1 /* STABLE */\n  })) : _createCommentVNode(\"v-if\", true)])])), [[_directive_loading, _ctx.detailLoading]]), _createVNode(_component_TaskFormDrawer, {\n    visible: _ctx.drawerVisible,\n    \"onUpdate:visible\": [_cache[2] || (_cache[2] = $event => _ctx.drawerVisible = $event), _ctx.onDrawerVisible],\n    \"model-value\": _ctx.detail,\n    \"group-options\": _ctx.groupOptions,\n    \"owner-options\": _ctx.ownerOptions,\n    \"tag-options\": _ctx.tagOptions,\n    submitting: _ctx.submitting,\n    onSubmit: _ctx.submitTask,\n    onCronHelper: _ctx.openCronHelper\n  }, null, 8 /* PROPS */, [\"visible\", \"model-value\", \"group-options\", \"owner-options\", \"tag-options\", \"submitting\", \"onSubmit\", \"onUpdate:visible\", \"onCronHelper\"]), _createVNode(_component_el_drawer, {\n    modelValue: _ctx.logVisible,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.logVisible = $event),\n    title: \"执行日志\",\n    size: \"40%\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"pre\", _hoisted_21, _toDisplayString(_ctx.activeLog || '暂无日志内容'), 1 /* TEXT */)]),\n    footer: _withCtx(() => [_createVNode(_component_el_space, null, {\n      default: _withCtx(() => [_createVNode(_component_el_button, {\n        type: \"primary\",\n        onClick: _ctx.copyLog,\n        disabled: !_ctx.activeLog\n      }, {\n        default: _withCtx(() => [...(_cache[22] || (_cache[22] = [_createTextVNode(\"复制\", -1 /* CACHED */)]))]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"onClick\", \"disabled\"]), _createVNode(_component_el_button, {\n        onClick: _cache[3] || (_cache[3] = $event => _ctx.logVisible = false)\n      }, {\n        default: _withCtx(() => [...(_cache[23] || (_cache[23] = [_createTextVNode(\"关闭\", -1 /* CACHED */)]))]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_el_page_header","onBack","_ctx","goBack","content","_withCtx","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","detail","name","_component_StatusTag","status","enabled","group","_createBlock","_component_el_tag","type","effect","extra","_component_el_space","_component_el_button","loading","triggering","onClick","triggerTask","_cache","openEdit","_component_el_popconfirm","title","onConfirm","confirmDelete","reference","_hoisted_4","_hoisted_5","_hoisted_6","_component_el_descriptions","column","size","border","_component_el_descriptions_item","label","id","typeLabel","executorLabel","executorType","cronExpr","_hoisted_7","owner","timeout","createdAt","updatedAt","_hoisted_8","routeLabel","routeStrategy","maxRetry","retryLabel","retryPolicy","shardCount","idempotentKey","concurrencyLabel","concurrencyPolicy","_hoisted_9","_component_el_input","parameterText","$event","rows","readonly","placeholder","_hoisted_10","_hoisted_11","_component_el_radio_group","chartRange","onChange","loadExecutions","_component_el_radio_button","_hoisted_12","hasExecutionData","_component_BaseChart","options","successTrendOptions","_component_el_empty","description","executionLoading","_hoisted_13","_hoisted_14","_hoisted_15","durationChartOptions","_hoisted_16","_hoisted_17","executionStats","success","failed","_component_el_table","data","executions","height","empty","_component_el_table_column","prop","width","default","row","getDurationTagType","duration","fixed","link","openLog","_hoisted_18","_hoisted_19","dependencies","length","_component_TaskDependencyGraph","_component_el_timeline","_Fragment","_renderList","dep","_component_el_timeline_item","key","timestamp","triggerType","_hoisted_20","node","detailLoading","_component_TaskFormDrawer","visible","drawerVisible","onDrawerVisible","groupOptions","ownerOptions","tagOptions","submitting","onSubmit","submitTask","onCronHelper","openCronHelper","_component_el_drawer","logVisible","_hoisted_21","activeLog","footer","copyLog","disabled"],"sources":["D:\\桌面\\项目\\分布式任务调度系统\\SkyTask-main\\SkyTask-main\\skytask-frontend\\src\\views\\TaskDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"task-detail\">\n    <el-page-header @back=\"goBack\">\n      <template #content>\n        <div class=\"header\">\n          <span class=\"header__title\">{{ detail?.name || '任务详情' }}</span>\n          <StatusTag :status=\"detail?.enabled ? 'SUCCESS' : 'DISABLED'\" />\n          <el-tag v-if=\"detail?.group\" type=\"info\" effect=\"plain\">{{ detail.group }}</el-tag>\n        </div>\n      </template>\n      <template #extra>\n        <el-space>\n          <el-button type=\"primary\" :loading=\"triggering\" @click=\"triggerTask\">立即运行</el-button>\n          <el-button @click=\"openEdit\">编辑任务</el-button>\n          <el-popconfirm\n            title=\"确定删除此任务吗？\"\n            confirm-button-text=\"确认\"\n            cancel-button-text=\"取消\"\n            @confirm=\"confirmDelete\"\n          >\n            <template #reference>\n              <el-button type=\"danger\">删除</el-button>\n            </template>\n          </el-popconfirm>\n        </el-space>\n      </template>\n    </el-page-header>\n\n    <div v-loading=\"detailLoading\" class=\"content\">\n      <section class=\"card detail-card\">\n        <div class=\"detail-card__section\">\n          <h3>基本信息</h3>\n          <el-descriptions :column=\"2\" size=\"small\" border>\n            <el-descriptions-item label=\"任务ID\">{{ detail?.id || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"任务类型\">{{ typeLabel(detail?.type) }}</el-descriptions-item>\n            <el-descriptions-item label=\"执行器\">{{ executorLabel(detail?.executorType) }}</el-descriptions-item>\n            <el-descriptions-item label=\"Cron表达式\">\n              <el-tag v-if=\"detail?.cronExpr\" type=\"success\" effect=\"plain\">{{ detail.cronExpr }}</el-tag>\n              <span v-else>-</span>\n            </el-descriptions-item>\n            <el-descriptions-item label=\"负责人\">{{ detail?.owner || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"超时时间\">{{ detail?.timeout || 300 }} 秒</el-descriptions-item>\n            <el-descriptions-item label=\"创建时间\">{{ detail?.createdAt || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"更新时间\">{{ detail?.updatedAt || '-' }}</el-descriptions-item>\n          </el-descriptions>\n        </div>\n\n        <div class=\"detail-card__section\">\n          <h3>调度策略</h3>\n          <el-descriptions :column=\"2\" size=\"small\" border>\n            <el-descriptions-item label=\"路由策略\">{{ routeLabel(detail?.routeStrategy) }}</el-descriptions-item>\n            <el-descriptions-item label=\"最大重试次数\">{{ detail?.maxRetry ?? 0 }}</el-descriptions-item>\n            <el-descriptions-item label=\"重试策略\">{{ retryLabel(detail?.retryPolicy) }}</el-descriptions-item>\n            <el-descriptions-item label=\"分片数\">{{ detail?.shardCount ?? 1 }}</el-descriptions-item>\n            <el-descriptions-item label=\"幂等键\">{{ detail?.idempotentKey || '-' }}</el-descriptions-item>\n            <el-descriptions-item label=\"并发策略\">{{ concurrencyLabel(detail?.concurrencyPolicy) }}</el-descriptions-item>\n          </el-descriptions>\n        </div>\n\n        <div class=\"detail-card__section\">\n          <h3>任务参数</h3>\n          <el-input\n            v-model=\"parameterText\"\n            type=\"textarea\"\n            :rows=\"5\"\n            readonly\n            placeholder=\"未配置参数\"\n          />\n        </div>\n      </section>\n\n      <section class=\"card chart-card\">\n        <div class=\"chart-card__header\">\n          <h3>执行成功趋势</h3>\n          <el-radio-group v-model=\"chartRange\" size=\"small\" @change=\"loadExecutions\">\n            <el-radio-button label=\"24h\">24小时</el-radio-button>\n            <el-radio-button label=\"7d\">7天</el-radio-button>\n            <el-radio-button label=\"30d\">30天</el-radio-button>\n          </el-radio-group>\n        </div>\n        <div v-loading=\"executionLoading\" class=\"chart-content\">\n          <BaseChart v-if=\"hasExecutionData\" :options=\"successTrendOptions\" class=\"chart\" />\n          <el-empty v-else description=\"暂无执行数据\" />\n        </div>\n      </section>\n\n      <section class=\"card chart-card\">\n        <div class=\"chart-card__header\">\n          <h3>执行耗时（最近20次）</h3>\n          <el-tag size=\"small\" type=\"info\">最近20次执行</el-tag>\n        </div>\n        <div v-loading=\"executionLoading\" class=\"chart-content\">\n          <BaseChart v-if=\"hasExecutionData\" :options=\"durationChartOptions\" class=\"chart\" />\n          <el-empty v-else description=\"暂无执行数据\" />\n        </div>\n      </section>\n\n      <section class=\"card execution-card\">\n        <div class=\"execution-card__header\">\n          <h3>最近执行记录</h3>\n          <el-space>\n            <el-tag size=\"small\">\n              成功: {{ executionStats.success }} | 失败: {{ executionStats.failed }}\n            </el-tag>\n            <el-button size=\"small\" @click=\"loadExecutions\">刷新</el-button>\n          </el-space>\n        </div>\n        <el-table :data=\"executions\" height=\"320\" v-loading=\"executionLoading\">\n          <el-table-column prop=\"triggerTime\" label=\"触发时间\" width=\"160\" />\n          <el-table-column prop=\"node\" label=\"执行节点\" width=\"140\" show-overflow-tooltip />\n          <el-table-column label=\"状态\" width=\"110\">\n            <template #default=\"{ row }\">\n              <StatusTag :status=\"row.status || 'UNKNOWN'\" />\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"duration\" label=\"耗时\" width=\"110\">\n            <template #default=\"{ row }\">\n              <el-tag :type=\"getDurationTagType(row.duration)\" size=\"small\">\n                {{ row.duration || 0 }} ms\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"retry\" label=\"重试\" width=\"80\" />\n          <el-table-column prop=\"traceId\" label=\"追踪ID\" min-width=\"160\" show-overflow-tooltip />\n          <el-table-column label=\"操作\" width=\"110\" fixed=\"right\">\n            <template #default=\"{ row }\">\n              <el-button link type=\"primary\" size=\"small\" @click=\"openLog(row)\">查看日志</el-button>\n            </template>\n          </el-table-column>\n          <template #empty>\n            <el-empty description=\"暂无执行记录\" />\n          </template>\n        </el-table>\n      </section>\n\n      <section class=\"card dependency-card\">\n        <div class=\"dependency-card__header\">\n          <h3>上游依赖</h3>\n          <el-tag v-if=\"detail?.dependencies?.length\" size=\"small\" type=\"info\">\n            {{ detail.dependencies.length }} 个任务\n          </el-tag>\n        </div>\n        <TaskDependencyGraph\n          :task-name=\"detail?.name\"\n          :dependencies=\"detail?.dependencies || []\"\n        />\n        <el-timeline v-if=\"detail?.dependencies?.length\" class=\"dependency-timeline\">\n          <el-timeline-item\n            v-for=\"dep in detail.dependencies\"\n            :key=\"dep.id\"\n            :timestamp=\"dep.triggerType || '手动'\"\n            :type=\"dep.status === 'SUCCESS' ? 'success' : dep.status === 'FAILED' ? 'danger' : 'info'\"\n          >\n            <div class=\"dependency-item\">\n              <strong>{{ dep.name }}</strong>\n              <span>节点: {{ dep.node || '-' }}</span>\n              <span>状态: <StatusTag :status=\"dep.status || 'UNKNOWN'\" /></span>\n              <el-tag v-if=\"dep.cronExpr\" size=\"small\" effect=\"plain\">{{ dep.cronExpr }}</el-tag>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n      </section>\n    </div>\n\n    <TaskFormDrawer\n      v-model:visible=\"drawerVisible\"\n      :model-value=\"detail\"\n      :group-options=\"groupOptions\"\n      :owner-options=\"ownerOptions\"\n      :tag-options=\"tagOptions\"\n      :submitting=\"submitting\"\n      @submit=\"submitTask\"\n      @update:visible=\"onDrawerVisible\"\n      @cron-helper=\"openCronHelper\"\n    />\n\n    <el-drawer\n      v-model=\"logVisible\"\n      title=\"执行日志\"\n      size=\"40%\"\n    >\n      <template #default>\n        <pre class=\"log\">{{ activeLog || '暂无日志内容' }}</pre>\n      </template>\n      <template #footer>\n        <el-space>\n          <el-button type=\"primary\" @click=\"copyLog\" :disabled=\"!activeLog\">复制</el-button>\n          <el-button @click=\"logVisible = false\">关闭</el-button>\n        </el-space>\n      </template>\n    </el-drawer>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport dayjs from 'dayjs';\nimport StatusTag from '@/components/common/StatusTag.vue';\nimport TaskFormDrawer from '@/components/task/TaskFormDrawer.vue';\nimport TaskDependencyGraph from '@/components/task/TaskDependencyGraph.vue';\nimport BaseChart from '@/components/charts/BaseChart.vue';\n\nconst store = useStore();\nconst route = useRoute();\nconst router = useRouter();\n\nconst taskId = route.params.taskId;\nconst drawerVisible = ref(false);\nconst submitting = ref(false);\nconst logVisible = ref(false);\nconst activeLog = ref('');\nconst triggering = ref(false);\nconst detailLoading = ref(false);\nconst chartRange = ref('24h');\n\nconst groupOptions = [\n  { label: 'Data Report', value: 'DATA_REPORT' },\n  { label: 'Realtime Risk', value: 'RISK_CONTROL' },\n  { label: 'Marketing', value: 'MARKETING' },\n  { label: 'Recommendation', value: 'RECOMMEND' }\n];\n\nconst ownerOptions = [\n  { label: 'Alice - Data Platform', value: 'alice' },\n  { label: 'Bob - Marketing', value: 'bob' },\n  { label: 'Carol - Settlement', value: 'carol' },\n  { label: 'David - Recommendation', value: 'david' }\n];\n\nconst tagOptions = ['report', 'risk', 'cache', 'recommend', 'marketing', 'settlement'];\n\nconst parseError = (error) =>\n  error?.response?.data?.message || error?.message || '操作失败，请稍后重试';\n\n// 统一的日期转换函数\nconst parseTriggerTime = (triggerTime) => {\n  if (!triggerTime) {\n    return null;\n  }\n  \n  // 如果已经是字符串，直接返回\n  if (typeof triggerTime === 'string') {\n    return triggerTime;\n  }\n  \n  // 如果是对象（OffsetDateTime 序列化结果），尝试转换\n  if (typeof triggerTime === 'object') {\n    const { year, monthValue, month, dayOfMonth, day, hour, minute, second } = triggerTime;\n    \n    const y = year;\n    let m = monthValue || month;\n    const d = dayOfMonth || day;\n    const h = hour || 0;\n    const min = minute || 0;\n    const s = second || 0;\n    \n    // 如果 month 是字符串（如\"OCTOBER\"），转换为数字\n    if (typeof m === 'string') {\n      const monthMap = {\n        'JANUARY': 1, 'FEBRUARY': 2, 'MARCH': 3, 'APRIL': 4,\n        'MAY': 5, 'JUNE': 6, 'JULY': 7, 'AUGUST': 8,\n        'SEPTEMBER': 9, 'OCTOBER': 10, 'NOVEMBER': 11, 'DECEMBER': 12\n      };\n      m = monthMap[m.toUpperCase()] || parseInt(m);\n    }\n    \n    if (y && m && d) {\n      try {\n        // 使用 JavaScript Date 对象构建日期，确保兼容性\n        const date = dayjs(new Date(y, m - 1, d, h, min, s));\n        \n        if (date.isValid()) {\n          return date.format('YYYY-MM-DDTHH:mm:ss');\n        }\n      } catch (error) {\n        console.error('日期构建异常:', error);\n      }\n    }\n  }\n  \n  return String(triggerTime);\n};\n\nonMounted(async () => {\n  detailLoading.value = true;\n  try {\n    await store.dispatch('tasks/loadTaskDetail', taskId);\n    await loadExecutions();\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  } finally {\n    detailLoading.value = false;\n  }\n});\n\nconst detail = computed(() => store.getters['tasks/currentTask'] || {});\nconst executions = computed(() => store.getters['tasks/taskExecutions'] || []);\nconst executionLoading = computed(() => store.getters['tasks/taskExecutionLoading']);\n\nconst parameterText = computed(() => {\n  const params = detail.value?.parameters;\n  if (!params) return '未配置参数';\n  if (typeof params === 'string') return params;\n  try {\n    return JSON.stringify(params, null, 2);\n  } catch (error) {\n    return String(params);\n  }\n});\n\nconst hasExecutionData = computed(\n  () => Array.isArray(executions.value) && executions.value.length > 0\n);\n\nconst executionStats = computed(() => {\n  if (!hasExecutionData.value) return { success: 0, failed: 0 };\n  const success = executions.value.filter((e) => e.status === 'SUCCESS').length;\n  const failed = executions.value.filter((e) => e.status === 'FAILED').length;\n  return { success, failed };\n});\n\nconst successTrendOptions = computed(() => {\n  if (!hasExecutionData.value) return {};\n\n  // 将所有执行记录的 triggerTime 转换为标准字符串格式\n  const normalizedExecs = executions.value.map(exec => ({\n    ...exec,\n    triggerTime: parseTriggerTime(exec.triggerTime)\n  }));\n\n  // 按时间排序\n  const sortedExecs = [...normalizedExecs].sort((a, b) => {\n    if (!a.triggerTime) return 1;\n    if (!b.triggerTime) return -1;\n    return a.triggerTime.localeCompare(b.triggerTime);\n  });\n  \n  // 根据时间范围动态格式化横坐标\n  const formatTimeLabel = (timeString) => {\n    if (!timeString) return '无时间';\n    \n    try {\n      const date = dayjs(timeString);\n      \n      if (!date.isValid()) {\n        // 降级处理：尝试提取日期部分\n        if (typeof timeString === 'string' && timeString.length >= 10) {\n          return timeString.substring(5, 10); // MM-DD\n        }\n        return '无效';\n      }\n      \n      // 根据时间范围选择格式\n      switch (chartRange.value) {\n        case '24h':\n          return date.format('HH:mm');\n        case '7d':\n          return date.format('MM-DD HH:mm');\n        case '30d':\n          return date.format('MM-DD');\n        default:\n          return date.format('MM-DD HH:mm');\n      }\n    } catch (error) {\n      console.error('日期格\n  \n  const categories = sortedExecs.map(e => formatTimeLabel(e.triggerTime));\n  const successData = sortedExecs.map((e) => (e.status === 'SUCCESS' ? 100 : 0));\n  const failedData = sortedExecs.map((e) => (e.status === 'FAILED' ? 100 : 0));\n\n  // 根据时间范围调整标签旋转角度\n  const labelRotation = chartRange.value === '30d' ? 45 : 0;\n\n  return {\n    color: ['#22c55e', '#ef4444'],\n    tooltip: {\n      trigger: 'axis',\n      formatter: (params) =>\n        params.map((p) => `${p.marker}${p.seriesName}: ${p.value}%`).join('<br/>')\n    },\n    legend: {\n      data: ['成功', '失败']\n    },\n    grid: { left: 50, right: 24, top: 40, bottom: 50 },\n    xAxis: {\n      type: 'category',\n      data: categories,\n      axisLabel: { \n        rotate: labelRotation, \n        fontSize: 11,\n        interval: chartRange.value === '30d' ? 'auto' : 0\n      }\n    },\n    yAxis: {\n      type: 'value',\n      min: 0,\n      max: 100,\n      axisLabel: { formatter: '{value}%' }\n    },\n    series: [\n      {\n        name: '成功',\n        type: 'line',\n        smooth: true,\n        areaStyle: { opacity: 0.3 },\n        data: successData\n      },\n      {\n        name: '失败',\n        type: 'line',\n        smooth: true,\n        areaStyle: { opacity: 0.3 },\n        data: failedData\n      }\n    ]\n  };\n});\n\nconst durationChartOptions = computed(() => {\n  if (!hasExecutionData.value) return {};\n\n  // 转换并排序\n  const normalizedExecs = executions.value\n    .map(exec => ({\n      ...exec,\n      triggerTime: parseTriggerTime(exec.triggerTime)\n    }))\n    .filter(e => e.triggerTime)\n    .sort((a, b) => a.triggerTime.localeCompare(b.triggerTime))\n    .slice(-20);\n\n  const categories = normalizedExecs.map((e) => dayjs(e.triggerTime).format('HH:mm'));\n  const durations = normalizedExecs.map((e) => Number(e.duration || 0));\n\n  return {\n    color: ['#f97316'],\n    tooltip: {\n      trigger: 'axis',\n      formatter: (params) => {\n        const p = params[0];\n        return `${p.axisValue}<br/>${p.marker}耗时: ${p.value} ms`;\n      }\n    },\n    grid: { left: 60, right: 24, top: 30, bottom: 60 },\n    xAxis: {\n      type: 'category',\n      data: categories,\n      axisLabel: { rotate: 45, fontSize: 11 }\n    },\n    yAxis: {\n      type: 'value',\n      axisLabel: { formatter: '{value} ms' }\n    },\n    series: [\n      {\n        name: '耗时',\n        type: 'bar',\n        barMaxWidth: 30,\n        data: durations,\n        itemStyle: {\n          color: (params) => {\n            const val = params.value;\n            if (val < 1000) return '#22c55e';\n            if (val < 5000) return '#f59e0b';\n            return '#ef4444';\n          }\n        }\n      }\n    ]\n  };\n});\n\nconst loadExecutions = async () => {\n  try {\n    await store.dispatch('tasks/loadTaskExecutions', {\n      taskId,\n      page: 1,\n      size: 50,\n      range: chartRange.value\n    });\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  }\n};\n\nconst goBack = () => {\n  router.back();\n};\n\nconst openEdit = () => {\n  drawerVisible.value = true;\n};\n\nconst onDrawerVisible = (visible) => {\n  drawerVisible.value = visible;\n  if (!visible) {\n    submitting.value = false;\n  }\n};\n\nconst submitTask = async (payload) => {\n  submitting.value = true;\n  try {\n    await store.dispatch('tasks/submitTask', payload);\n    await store.dispatch('tasks/loadTaskDetail', taskId);\n    drawerVisible.value = false;\n    ElMessage.success('任务已更新');\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  } finally {\n    submitting.value = false;\n  }\n};\n\nconst triggerTask = async () => {\n  if (!detail.value?.id || triggering.value) {\n    return;\n  }\n  triggering.value = true;\n  try {\n    await store.dispatch('tasks/triggerTask', {\n      taskId,\n      payload: {\n        manual: true,\n        operator: store.getters['auth/profile']?.username || 'anonymous'\n      }\n    });\n    ElMessage.success('执行已触发');\n    setTimeout(loadExecutions, 2000);\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  } finally {\n    triggering.value = false;\n  }\n};\n\nconst confirmDelete = async () => {\n  try {\n    await store.dispatch('tasks/removeTask', taskId);\n    ElMessage.success('任务已删除');\n    router.push('/tasks');\n  } catch (error) {\n    ElMessage.error(parseError(error));\n  }\n};\n\nconst openLog = (record) => {\n  logVisible.value = true;\n  \n  // 构建详细的日志信息\n  const logInfo = {\n    '执行记录ID': record.id || '-',\n    '任务ID': record.taskId || '-',\n    '触发时间': record.triggerTime || '-',\n    '执行节点': record.node || '-',\n    '执行状态': record.status || '-',\n    '执行耗时': record.duration ? `${record.duration}ms` : '-',\n    '重试次数': record.retry || 0,\n    'Trace ID': record.traceId || '-',\n    '执行结果': record.log || 'No execution result',\n    '返回参数': record.parameters ? JSON.stringify(record.parameters, null, 2) : 'No parameters returned'\n  };\n  \n  // 格式化日志显示\n  const formattedLog = Object.entries(logInfo)\n    .map(([key, value]) => `【${key}】\\n${value}`)\n    .join('\\n\\n' + '='.repeat(50) + '\\n\\n');\n  \n  activeLog.value = formattedLog;\n};\n\nconst copyLog = () => {\n  if (!activeLog.value) {\n    return;\n  }\n  navigator.clipboard\n    .writeText(activeLog.value)\n    .then(() => ElMessage.success('已复制到剪贴板'))\n    .catch(() => ElMessage.error('复制失败'));\n};\n\nconst openCronHelper = () => {\n  router.push({ path: '/config', query: { tab: 'cron-tool' } });\n};\n\nconst getDurationTagType = (duration) => {\n  const value = Number(duration || 0);\n  if (value < 1000) return 'success';\n  if (value < 5000) return 'warning';\n  return 'danger';\n};\n\nconst typeLabel = (type) => {\n  const map = {\n    CRON: 'Cron定时',\n    ONE_TIME: '一次性',\n    FIXED_RATE: '固定频率'\n  };\n  return map[type] || type || '-';\n};\n\nconst executorLabel = (executor) => {\n  const map = {\n    HTTP: 'HTTP',\n    GRPC: 'gRPC',\n    SPRING_BEAN: 'Spring Bean',\n    SHELL: 'Shell'\n  };\n  return map[executor] || executor || '-';\n};\n\nconst routeLabel = (route) => {\n  const map = {\n    ROUND_ROBIN: '轮询',\n    CONSISTENT_HASH: '一致性哈希',\n    SHARDING: '分片',\n    FIXED_NODE: '固定节点'\n  };\n  return map[route] || route || '-';\n};\n\nconst retryLabel = (retry) => {\n  const map = {\n    NONE: '不重试',\n    FIXED_INTERVAL: '固定间隔',\n    EXP_BACKOFF: '指数退避'\n  };\n  return map[retry] || retry || '固定间隔';\n};\n\nconst concurrencyLabel = (policy) => {\n  const map = {\n    PARALLEL: '并行',\n    SERIAL: '串行',\n    DISCARD: '丢弃'\n  };\n  return map[policy] || policy || '并行';\n};\n</script>\n\n<style scoped lang=\"scss\">\n.task-detail {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n\n  &__title {\n    font-size: 20px;\n    font-weight: 600;\n  }\n}\n\n.content {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n  gap: 20px;\n}\n\n.detail-card {\n  grid-column: span 2;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  &__section {\n    h3 {\n      margin: 0 0 16px;\n      font-size: 16px;\n      font-weight: 600;\n      color: #0f172a;\n    }\n  }\n}\n\n.chart-card,\n.execution-card,\n.dependency-card {\n  h3 {\n    margin: 0;\n    font-size: 16px;\n    font-weight: 600;\n    color: #0f172a;\n  }\n}\n\n.chart-card__header,\n.execution-card__header,\n.dependency-card__header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 16px;\n}\n\n.chart-content {\n  min-height: 280px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.chart {\n  width: 100%;\n  height: 280px;\n}\n\n.execution-card {\n  grid-column: span 2;\n}\n\n.dependency-card {\n  grid-column: span 2;\n}\n\n.dependency-timeline {\n  margin-top: 16px;\n}\n\n.dependency-item {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 13px;\n  color: #475569;\n  flex-wrap: wrap;\n\n  strong {\n    font-weight: 600;\n    color: #1e293b;\n  }\n}\n\n.log {\n  margin: 0;\n  font-family: 'Fira Code', 'Consolas', 'Monaco', monospace;\n  font-size: 13px;\n  line-height: 1.6;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  background: #0f172a;\n  color: #e2e8f0;\n  padding: 16px;\n  border-radius: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}