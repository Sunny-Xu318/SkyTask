{"ast":null,"code":"import { openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dependency-graph\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_empty = _resolveComponent(\"el-empty\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$setup.hasGraph ? (_openBlock(), _createBlock($setup[\"BaseChart\"], {\n    key: 0,\n    options: $setup.chartOptions,\n    class: \"dependency-graph__chart\"\n  }, null, 8 /* PROPS */, [\"options\"])) : (_openBlock(), _createBlock(_component_el_empty, {\n    key: 1,\n    description: \"暂无依赖信息\"\n  }))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","$setup","hasGraph","_createBlock","options","chartOptions","_component_el_empty","description"],"sources":["D:\\桌面\\项目\\分布式任务调度系统\\SkyTask\\skytask-frontend\\src\\components\\task\\TaskDependencyGraph.vue"],"sourcesContent":["<template>\n  <div class=\"dependency-graph\">\n    <BaseChart\n      v-if=\"hasGraph\"\n      :options=\"chartOptions\"\n      class=\"dependency-graph__chart\"\n    />\n    <el-empty v-else description=\"暂无依赖信息\" />\n  </div>\n</template>\n\n<script setup>\nimport { computed } from 'vue';\nimport BaseChart from '../charts/BaseChart.vue';\n\nconst props = defineProps({\n  taskName: {\n    type: String,\n    default: ''\n  },\n  dependencies: {\n    type: Array,\n    default: () => []\n  }\n});\n\nconst hasGraph = computed(() => Array.isArray(props.dependencies) && props.dependencies.length > 0);\n\nconst chartOptions = computed(() => {\n  if (!hasGraph.value) {\n    return {};\n  }\n\n  const nodes = [];\n  const links = [];\n  const rootId = 'root';\n\n  nodes.push({\n    id: rootId,\n    name: props.taskName || '当前任务',\n    symbolSize: 64,\n    itemStyle: { color: '#2563eb' },\n    label: { fontWeight: 'bold' }\n  });\n\n  props.dependencies.forEach((dep, index) => {\n    const nodeId = String(dep.id ?? index);\n    const status = (dep.status || 'UNKNOWN').toUpperCase();\n    let color = '#94a3b8';\n    if (status === 'SUCCESS') color = '#22c55e';\n    else if (status === 'FAILED') color = '#ef4444';\n    else if (status === 'RUNNING') color = '#f97316';\n\n    nodes.push({\n      id: nodeId,\n      name: dep.name || `任务 ${index + 1}`,\n      symbolSize: 48,\n      itemStyle: { color },\n      value: status,\n      tooltip: {\n        formatter: () => {\n          const parts = [\n            `<strong>${dep.name || `任务 ${index + 1}`}</strong>`,\n            `状态: ${status}`,\n            dep.cronExpr ? `Cron: ${dep.cronExpr}` : null,\n            dep.node ? `节点: ${dep.node}` : null\n          ].filter(Boolean);\n          return parts.join('<br/>');\n        }\n      }\n    });\n    links.push({ source: rootId, target: nodeId });\n  });\n\n  return {\n    tooltip: { trigger: 'item', enterable: true },\n    legend: { show: false },\n    series: [\n      {\n        type: 'graph',\n        layout: 'force',\n        roam: true,\n        focusNodeAdjacency: true,\n        draggable: true,\n        data: nodes,\n        links,\n        force: {\n          repulsion: 1400,\n          edgeLength: 140,\n          gravity: 0.2\n        },\n        lineStyle: {\n          color: '#94a3b8',\n          width: 2,\n          curveness: 0.2\n        },\n        label: {\n          color: '#0f172a'\n        }\n      }\n    ]\n  };\n});\n</script>\n\n<style scoped>\n.dependency-graph {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 320px;\n}\n\n.dependency-graph__chart {\n  width: 100%;\n  height: 320px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;;uBAA7BC,mBAAA,CAOM,OAPNC,UAOM,GALIC,MAAA,CAAAC,QAAQ,I,cADhBC,YAAA,CAIEF,MAAA;;IAFCG,OAAO,EAAEH,MAAA,CAAAI,YAAY;IACtBP,KAAK,EAAC;yDAERK,YAAA,CAAwCG,mBAAA;;IAAvBC,WAAW,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}