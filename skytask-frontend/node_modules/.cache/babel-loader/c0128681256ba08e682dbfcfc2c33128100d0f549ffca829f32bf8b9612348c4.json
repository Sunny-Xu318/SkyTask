{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { computed, onMounted, ref, watch } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\nimport { ElMessage } from \"element-plus\";\nimport { CaretBottom, CaretTop } from \"@element-plus/icons-vue\";\nimport BaseChart from \"../components/charts/BaseChart.vue\";\nexport default {\n  __name: 'DashboardView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const store = useStore();\n    const metricRange = ref(\"24h\");\n    const loadingMetrics = ref(false);\n    const metricError = ref(null);\n    const nodeMetricsLoading = ref(false);\n    const nodeMetricsError = ref(null);\n    const nodeListError = ref(null);\n    const parseError = error => error?.response?.data?.message || error?.message || \"请求失败\";\n    const isForbidden = error => Number(error?.response?.status) === 403;\n    const loadTaskMetrics = async (params = {}) => {\n      loadingMetrics.value = true;\n      try {\n        await store.dispatch(\"tasks/loadMetrics\", params);\n        metricError.value = null;\n      } catch (error) {\n        const forbidden = isForbidden(error);\n        metricError.value = {\n          message: forbidden ? \"当前账号无权限查看任务统计\" : parseError(error),\n          forbidden\n        };\n        ElMessage[forbidden ? \"warning\" : \"error\"](metricError.value.message);\n      } finally {\n        loadingMetrics.value = false;\n      }\n    };\n    const loadNodeMetricsData = async () => {\n      nodeMetricsLoading.value = true;\n      try {\n        await store.dispatch(\"nodes/loadNodeMetrics\");\n        nodeMetricsError.value = null;\n      } catch (error) {\n        const forbidden = isForbidden(error);\n        nodeMetricsError.value = {\n          message: forbidden ? \"当前账号无权限查看节点指标\" : parseError(error),\n          forbidden\n        };\n        ElMessage[forbidden ? \"warning\" : \"error\"](nodeMetricsError.value.message);\n      } finally {\n        nodeMetricsLoading.value = false;\n      }\n    };\n    const loadNodesData = async () => {\n      try {\n        await store.dispatch(\"nodes/loadNodes\");\n        nodeListError.value = null;\n      } catch (error) {\n        const forbidden = isForbidden(error);\n        nodeListError.value = {\n          message: forbidden ? \"当前账号无权限查看节点列表\" : parseError(error),\n          forbidden\n        };\n        ElMessage[forbidden ? \"warning\" : \"error\"](nodeListError.value.message);\n      }\n    };\n    const reloadMetrics = () => loadTaskMetrics({\n      range: metricRange.value\n    });\n    const reloadNodes = () => Promise.all([loadNodeMetricsData(), loadNodesData()]);\n    onMounted(async () => {\n      await Promise.all([loadTaskMetrics({\n        range: metricRange.value\n      }), loadNodeMetricsData(), loadNodesData()]);\n    });\n    watch(metricRange, range => {\n      loadTaskMetrics({\n        range\n      });\n    });\n    const metrics = computed(() => store.getters[\"tasks/taskMetrics\"] || {});\n    const nodeMetrics = computed(() => store.getters[\"nodes/nodeMetrics\"] || {});\n    const nodeList = computed(() => store.getters[\"nodes/nodeList\"] || []);\n    const nodesLoading = computed(() => store.getters[\"nodes/nodesLoading\"]);\n    const normalizedTrend = computed(() => (metrics.value.trend || []).map(item => ({\n      time: item.time ?? item.timestamp ?? \"\",\n      successRate: Number(item.successRate ?? item.success_rate ?? 0),\n      failedRate: Number(item.failedRate ?? item.failed_rate ?? 0)\n    })).filter(item => item.time));\n    const trendHasData = computed(() => normalizedTrend.value.length > 0);\n    const trendChartOptions = computed(() => {\n      if (!trendHasData.value) {\n        return {};\n      }\n      const categories = normalizedTrend.value.map(item => item.time);\n      const successSeries = normalizedTrend.value.map(item => Number(item.successRate.toFixed(2)));\n      const failedSeries = normalizedTrend.value.map(item => Number(item.failedRate.toFixed(2)));\n      return {\n        color: [\"#22c55e\", \"#ef4444\"],\n        tooltip: {\n          trigger: \"axis\",\n          formatter: params => params.map(p => `${p.marker}${p.seriesName}: ${Number(p.value).toFixed(2)}%`).join(\"<br/>\")\n        },\n        legend: {\n          data: [\"成功率\", \"失败率\"]\n        },\n        grid: {\n          left: 40,\n          right: 24,\n          top: 30,\n          bottom: 40\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: categories\n        },\n        yAxis: {\n          type: \"value\",\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: \"{value}%\"\n          }\n        },\n        series: [{\n          name: \"成功率\",\n          type: \"line\",\n          smooth: true,\n          areaStyle: {\n            opacity: 0.12\n          },\n          data: successSeries\n        }, {\n          name: \"失败率\",\n          type: \"line\",\n          smooth: true,\n          areaStyle: {\n            opacity: 0.08\n          },\n          data: failedSeries\n        }]\n      };\n    });\n    const nodeChartHasData = computed(() => nodeList.value.length > 0);\n    const nodeChartOptions = computed(() => {\n      if (!nodeChartHasData.value) {\n        return {};\n      }\n      const names = nodeList.value.map(node => node.name || node.id);\n      return {\n        color: [\"#38bdf8\", \"#f97316\"],\n        tooltip: {\n          trigger: \"axis\"\n        },\n        legend: {\n          data: [\"CPU\", \"内存\"]\n        },\n        grid: {\n          left: 40,\n          right: 24,\n          top: 30,\n          bottom: 50\n        },\n        xAxis: {\n          type: \"category\",\n          data: names\n        },\n        yAxis: {\n          type: \"value\",\n          min: 0,\n          max: 100,\n          axisLabel: {\n            formatter: \"{value}%\"\n          }\n        },\n        series: [{\n          name: \"CPU\",\n          type: \"bar\",\n          barMaxWidth: 28,\n          data: nodeList.value.map(node => Number(node.cpu ?? 0))\n        }, {\n          name: \"内存\",\n          type: \"bar\",\n          barMaxWidth: 28,\n          data: nodeList.value.map(node => Number(node.memory ?? 0))\n        }]\n      };\n    });\n    const successTrendDelta = computed(() => {\n      if (!trendHasData.value || normalizedTrend.value.length < 2) {\n        return 0;\n      }\n      const values = normalizedTrend.value.map(item => item.successRate);\n      return Number((values[values.length - 1] - values[0]).toFixed(1));\n    });\n    const failureTrendDelta = computed(() => {\n      if (!trendHasData.value || normalizedTrend.value.length < 2) {\n        return 0;\n      }\n      const values = normalizedTrend.value.map(item => item.failedRate);\n      return Number((values[values.length - 1] - values[0]).toFixed(1));\n    });\n    const overviewCards = computed(() => {\n      const totalTasks = metrics.value.totalTasks ?? 0;\n      const inactiveTasks = metrics.value.inactiveTasks ?? 0;\n      const successRate = Number(metrics.value.successRate ?? 0).toFixed(1);\n      const failedToday = metrics.value.failedToday ?? 0;\n      const backlog = metrics.value.backlog ?? 0;\n      return [{\n        key: \"total\",\n        title: \"任务总数\",\n        value: totalTasks,\n        tagType: \"primary\",\n        tagText: `停用 ${inactiveTasks}`,\n        trend: null,\n        subtitle: \"当前租户下所有任务数量\"\n      }, {\n        key: \"success\",\n        title: \"成功率\",\n        value: `${successRate}%`,\n        tagType: \"success\",\n        tagText: metricRange.value === \"7d\" ? \"最近 7 天\" : \"最近 24 小时\",\n        trend: successTrendDelta.value,\n        subtitle: successTrendDelta.value === 0 ? \"暂无波动\" : \"相较起始点的变化\"\n      }, {\n        key: \"failed\",\n        title: \"今日失败\",\n        value: failedToday,\n        tagType: \"danger\",\n        tagText: \"累计\",\n        trend: failureTrendDelta.value,\n        subtitle: \"自动降级会在阈值达到时触发\"\n      }, {\n        key: \"backlog\",\n        title: \"积压任务\",\n        value: backlog,\n        tagType: \"warning\",\n        tagText: \"待处理\",\n        trend: null,\n        subtitle: \"需要关注的等待或重试任务\"\n      }];\n    });\n    const topFailedTasks = computed(() => (metrics.value.topFailed || []).map(item => ({\n      id: item.id ?? `${item.name}-${item.taskId ?? \"\"}`,\n      name: item.name ?? \"-\",\n      owner: item.owner ?? \"-\",\n      failed: item.failed ?? 0,\n      lastFailed: item.lastFailed ?? \"-\"\n    })));\n    const topFailedHasData = computed(() => topFailedTasks.value.length > 0);\n    const recentEvents = computed(() => (metrics.value.recentEvents || []).map(event => ({\n      id: event.id ?? `${event.title ?? \"event\"}-${event.time ?? \"\"}`,\n      time: event.time ?? \"-\",\n      type: event.type ?? \"info\",\n      title: event.title ?? \"调度事件\",\n      tagLabel: event.tagLabel ?? \"\",\n      tagType: event.tagType ?? \"info\",\n      desc: event.desc ?? \"\"\n    })));\n    const recentEventsHasData = computed(() => recentEvents.value.length > 0);\n    const nodesStatusLabel = computed(() => {\n      const online = nodeMetrics.value.onlineNodes ?? 0;\n      const total = nodeMetrics.value.totalNodes ?? 0;\n      const offline = nodeMetrics.value.offlineNodes ?? 0;\n      return `在线 ${online}/${total} | 离线 ${offline}`;\n    });\n    const nodeHealthTag = computed(() => nodeMetrics.value.offlineNodes > 0 ? \"danger\" : \"success\");\n    const nodePanelError = computed(() => nodeMetricsError.value || nodeListError.value);\n    const navigateToTaskCenter = () => {\n      router.push(\"/tasks\");\n    };\n    const __returned__ = {\n      router,\n      store,\n      metricRange,\n      loadingMetrics,\n      metricError,\n      nodeMetricsLoading,\n      nodeMetricsError,\n      nodeListError,\n      parseError,\n      isForbidden,\n      loadTaskMetrics,\n      loadNodeMetricsData,\n      loadNodesData,\n      reloadMetrics,\n      reloadNodes,\n      metrics,\n      nodeMetrics,\n      nodeList,\n      nodesLoading,\n      normalizedTrend,\n      trendHasData,\n      trendChartOptions,\n      nodeChartHasData,\n      nodeChartOptions,\n      successTrendDelta,\n      failureTrendDelta,\n      overviewCards,\n      topFailedTasks,\n      topFailedHasData,\n      recentEvents,\n      recentEventsHasData,\n      nodesStatusLabel,\n      nodeHealthTag,\n      nodePanelError,\n      navigateToTaskCenter,\n      computed,\n      onMounted,\n      ref,\n      watch,\n      get useRouter() {\n        return useRouter;\n      },\n      get useStore() {\n        return useStore;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get CaretBottom() {\n        return CaretBottom;\n      },\n      get CaretTop() {\n        return CaretTop;\n      },\n      BaseChart\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","onMounted","ref","watch","useRouter","useStore","ElMessage","CaretBottom","CaretTop","BaseChart","router","store","metricRange","loadingMetrics","metricError","nodeMetricsLoading","nodeMetricsError","nodeListError","parseError","error","response","data","message","isForbidden","Number","status","loadTaskMetrics","params","value","dispatch","forbidden","loadNodeMetricsData","loadNodesData","reloadMetrics","range","reloadNodes","Promise","all","metrics","getters","nodeMetrics","nodeList","nodesLoading","normalizedTrend","trend","map","item","time","timestamp","successRate","success_rate","failedRate","failed_rate","filter","trendHasData","length","trendChartOptions","categories","successSeries","toFixed","failedSeries","color","tooltip","trigger","formatter","p","marker","seriesName","join","legend","grid","left","right","top","bottom","xAxis","type","boundaryGap","yAxis","min","max","axisLabel","series","name","smooth","areaStyle","opacity","nodeChartHasData","nodeChartOptions","names","node","id","barMaxWidth","cpu","memory","successTrendDelta","values","failureTrendDelta","overviewCards","totalTasks","inactiveTasks","failedToday","backlog","key","title","tagType","tagText","subtitle","topFailedTasks","topFailed","taskId","owner","failed","lastFailed","topFailedHasData","recentEvents","event","tagLabel","desc","recentEventsHasData","nodesStatusLabel","online","onlineNodes","total","totalNodes","offline","offlineNodes","nodeHealthTag","nodePanelError","navigateToTaskCenter","push"],"sources":["D:/桌面/项目/分布式任务调度系统/SkyTask/skytask-frontend/src/views/DashboardView.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n            <section class=\"dashboard__row\">\n      <el-card\n        shadow=\"hover\"\n        class=\"dashboard__panel\"\n        v-loading=\"nodeMetricsLoading || nodesLoading\"\n      >\n        <template #header>\n          <div class=\"panel__header\">\n            <span>执行器节点健康度</span>\n            <div class=\"panel__header-actions\">\n              <el-tag :type=\"nodeHealthTag\" size=\"small\">{{ nodesStatusLabel }}</el-tag>\n              <el-button type=\"primary\" link size=\"small\" @click=\"reloadNodes\">刷新</el-button>\n            </div>\n          </div>\n        </template>\n        <div v-if=\"nodePanelError\" class=\"panel__error\">\n          <el-result\n            :status=\"nodePanelError.forbidden ? 'warning' : 'error'\"\n            :title=\"nodePanelError.forbidden ? '无访问权限' : '节点数据加载失败'\"\n            :sub-title=\"nodePanelError.message\"\n          >\n            <template #extra>\n              <el-button type=\"primary\" size=\"small\" @click=\"reloadNodes\">重试</el-button>\n            </template>\n          </el-result>\n        </div>\n        <div v-else>\n          <div class=\"nodes-chart-wrapper\">\n            <BaseChart\n              v-if=\"nodeChartHasData\"\n              :options=\"nodeChartOptions\"\n              class=\"nodes-chart\"\n            />\n            <el-empty v-else description=\"暂无节点资源数据\" />\n          </div>\n          <div v-if=\"nodeList.length\" class=\"nodes\">\n            <div v-for=\"node in nodeList\" :key=\"node.id\" class=\"nodes__item\">\n              <div class=\"nodes__header\">\n                <span>{{ node.name }}</span>\n                <el-tag :type=\"node.status === 'ONLINE' ? 'success' : 'danger'\" size=\"small\">\n                  {{ node.status === 'ONLINE' ? '在线' : '离线' }}\n                </el-tag>\n              </div>\n              <div class=\"nodes__metrics\">\n                <div class=\"nodes__metric\">\n                  <span>CPU</span>\n                  <el-progress :percentage=\"node.cpu\" :status=\"node.cpu > 80 ? 'exception' : 'success'\" />\n                </div>\n                <div class=\"nodes__metric\">\n                  <span>内存</span>\n                  <el-progress\n                    :percentage=\"node.memory\"\n                    :status=\"node.memory > 80 ? 'exception' : 'warning'\"\n                  />\n                </div>\n                <div class=\"nodes__meta\">\n                  <span>运行中 {{ node.runningTasks }}</span>\n                  <span>延迟 {{ node.delay }}ms</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <el-empty v-else description=\"暂无执行节点\" />\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\" v-loading=\"loadingMetrics\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>最新调度事件</span>\n          </div>\n        </template>\n        <div v-if=\"metricError\" class=\"panel__error\">\n          <el-result\n            :status=\"metricError.forbidden ? 'warning' : 'error'\"\n            :title=\"metricError.forbidden ? '无访问权限' : '统计加载失败'\"\n            :sub-title=\"metricError.message\"\n          >\n            <template #extra>\n              <el-button type=\"primary\" size=\"small\" @click=\"reloadMetrics\">重试</el-button>\n            </template>\n          </el-result>\n        </div>\n        <el-timeline v-else-if=\"recentEventsHasData\">\n          <el-timeline-item\n            v-for=\"event in recentEvents\"\n            :key=\"event.id\"\n            :timestamp=\"event.time\"\n            :type=\"event.type\"\n          >\n            <div class=\"event\">\n              <div class=\"event__title\">\n                <span>{{ event.title }}</span>\n                <el-tag :type=\"event.tagType\" size=\"small\">{{ event.tagLabel }}</el-tag>\n              </div>\n              <div class=\"event__meta\">{{ event.desc }}</div>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n        <el-empty v-else description=\"暂无调度事件\" />\n      </el-card>\n    </section>\n\n            <section class=\"dashboard__row\">\n      <el-card\n        shadow=\"hover\"\n        class=\"dashboard__panel\"\n        v-loading=\"nodeMetricsLoading || nodesLoading\"\n      >\n        <template #header>\n          <div class=\"panel__header\">\n            <span>执行器节点健康度</span>\n            <div class=\"panel__header-actions\">\n              <el-tag :type=\"nodeHealthTag\" size=\"small\">{{ nodesStatusLabel }}</el-tag>\n              <el-button type=\"primary\" link size=\"small\" @click=\"reloadNodes\">刷新</el-button>\n            </div>\n          </div>\n        </template>\n        <div v-if=\"nodePanelError\" class=\"panel__error\">\n          <el-result\n            :status=\"nodePanelError.forbidden ? 'warning' : 'error'\"\n            :title=\"nodePanelError.forbidden ? '无访问权限' : '节点数据加载失败'\"\n            :sub-title=\"nodePanelError.message\"\n          >\n            <template #extra>\n              <el-button type=\"primary\" size=\"small\" @click=\"reloadNodes\">重试</el-button>\n            </template>\n          </el-result>\n        </div>\n        <div v-else>\n          <div class=\"nodes-chart-wrapper\">\n            <BaseChart\n              v-if=\"nodeChartHasData\"\n              :options=\"nodeChartOptions\"\n              class=\"nodes-chart\"\n            />\n            <el-empty v-else description=\"暂无节点资源数据\" />\n          </div>\n          <div v-if=\"nodeList.length\" class=\"nodes\">\n            <div v-for=\"node in nodeList\" :key=\"node.id\" class=\"nodes__item\">\n              <div class=\"nodes__header\">\n                <span>{{ node.name }}</span>\n                <el-tag :type=\"node.status === 'ONLINE' ? 'success' : 'danger'\" size=\"small\">\n                  {{ node.status === 'ONLINE' ? '在线' : '离线' }}\n                </el-tag>\n              </div>\n              <div class=\"nodes__metrics\">\n                <div class=\"nodes__metric\">\n                  <span>CPU</span>\n                  <el-progress :percentage=\"node.cpu\" :status=\"node.cpu > 80 ? 'exception' : 'success'\" />\n                </div>\n                <div class=\"nodes__metric\">\n                  <span>内存</span>\n                  <el-progress\n                    :percentage=\"node.memory\"\n                    :status=\"node.memory > 80 ? 'exception' : 'warning'\"\n                  />\n                </div>\n                <div class=\"nodes__meta\">\n                  <span>运行中 {{ node.runningTasks }}</span>\n                  <span>延迟 {{ node.delay }}ms</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <el-empty v-else description=\"暂无执行节点\" />\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\" v-loading=\"loadingMetrics\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>最新调度事件</span>\n          </div>\n        </template>\n        <div v-if=\"metricError\" class=\"panel__error\">\n          <el-result\n            :status=\"metricError.forbidden ? 'warning' : 'error'\"\n            :title=\"metricError.forbidden ? '无访问权限' : '统计加载失败'\"\n            :sub-title=\"metricError.message\"\n          >\n            <template #extra>\n              <el-button type=\"primary\" size=\"small\" @click=\"reloadMetrics\">重试</el-button>\n            </template>\n          </el-result>\n        </div>\n        <el-timeline v-else-if=\"recentEventsHasData\">\n          <el-timeline-item\n            v-for=\"event in recentEvents\"\n            :key=\"event.id\"\n            :timestamp=\"event.time\"\n            :type=\"event.type\"\n          >\n            <div class=\"event\">\n              <div class=\"event__title\">\n                <span>{{ event.title }}</span>\n                <el-tag :type=\"event.tagType\" size=\"small\">{{ event.tagLabel }}</el-tag>\n              </div>\n              <div class=\"event__meta\">{{ event.desc }}</div>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n        <el-empty v-else description=\"暂无调度事件\" />\n      </el-card>\n    </section>\n\n            <section class=\"dashboard__row\">\n      <el-card\n        shadow=\"hover\"\n        class=\"dashboard__panel\"\n        v-loading=\"nodeMetricsLoading || nodesLoading\"\n      >\n        <template #header>\n          <div class=\"panel__header\">\n            <span>执行器节点健康度</span>\n            <div class=\"panel__header-actions\">\n              <el-tag :type=\"nodeHealthTag\" size=\"small\">{{ nodesStatusLabel }}</el-tag>\n              <el-button type=\"primary\" link size=\"small\" @click=\"reloadNodes\">刷新</el-button>\n            </div>\n          </div>\n        </template>\n        <div v-if=\"nodePanelError\" class=\"panel__error\">\n          <el-result\n            :status=\"nodePanelError.forbidden ? 'warning' : 'error'\"\n            :title=\"nodePanelError.forbidden ? '无访问权限' : '节点数据加载失败'\"\n            :sub-title=\"nodePanelError.message\"\n          >\n            <template #extra>\n              <el-button type=\"primary\" size=\"small\" @click=\"reloadNodes\">重试</el-button>\n            </template>\n          </el-result>\n        </div>\n        <div v-else>\n          <div class=\"nodes-chart-wrapper\">\n            <BaseChart\n              v-if=\"nodeChartHasData\"\n              :options=\"nodeChartOptions\"\n              class=\"nodes-chart\"\n            />\n            <el-empty v-else description=\"暂无节点资源数据\" />\n          </div>\n          <div v-if=\"nodeList.length\" class=\"nodes\">\n            <div v-for=\"node in nodeList\" :key=\"node.id\" class=\"nodes__item\">\n              <div class=\"nodes__header\">\n                <span>{{ node.name }}</span>\n                <el-tag :type=\"node.status === 'ONLINE' ? 'success' : 'danger'\" size=\"small\">\n                  {{ node.status === 'ONLINE' ? '在线' : '离线' }}\n                </el-tag>\n              </div>\n              <div class=\"nodes__metrics\">\n                <div class=\"nodes__metric\">\n                  <span>CPU</span>\n                  <el-progress :percentage=\"node.cpu\" :status=\"node.cpu > 80 ? 'exception' : 'success'\" />\n                </div>\n                <div class=\"nodes__metric\">\n                  <span>内存</span>\n                  <el-progress\n                    :percentage=\"node.memory\"\n                    :status=\"node.memory > 80 ? 'exception' : 'warning'\"\n                  />\n                </div>\n                <div class=\"nodes__meta\">\n                  <span>运行中 {{ node.runningTasks }}</span>\n                  <span>延迟 {{ node.delay }}ms</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <el-empty v-else description=\"暂无执行节点\" />\n        </div>\n      </el-card>\n\n      <el-card shadow=\"hover\" class=\"dashboard__panel\" v-loading=\"loadingMetrics\">\n        <template #header>\n          <div class=\"panel__header\">\n            <span>最新调度事件</span>\n          </div>\n        </template>\n        <div v-if=\"metricError\" class=\"panel__error\">\n          <el-result\n            :status=\"metricError.forbidden ? 'warning' : 'error'\"\n            :title=\"metricError.forbidden ? '无访问权限' : '统计加载失败'\"\n            :sub-title=\"metricError.message\"\n          >\n            <template #extra>\n              <el-button type=\"primary\" size=\"small\" @click=\"reloadMetrics\">重试</el-button>\n            </template>\n          </el-result>\n        </div>\n        <el-timeline v-else-if=\"recentEventsHasData\">\n          <el-timeline-item\n            v-for=\"event in recentEvents\"\n            :key=\"event.id\"\n            :timestamp=\"event.time\"\n            :type=\"event.type\"\n          >\n            <div class=\"event\">\n              <div class=\"event__title\">\n                <span>{{ event.title }}</span>\n                <el-tag :type=\"event.tagType\" size=\"small\">{{ event.tagLabel }}</el-tag>\n              </div>\n              <div class=\"event__meta\">{{ event.desc }}</div>\n            </div>\n          </el-timeline-item>\n        </el-timeline>\n        <el-empty v-else description=\"暂无调度事件\" />\n      </el-card>\n    </section>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref, watch } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\nimport { ElMessage } from \"element-plus\";\nimport { CaretBottom, CaretTop } from \"@element-plus/icons-vue\";\nimport BaseChart from \"../components/charts/BaseChart.vue\";\n\nconst router = useRouter();\nconst store = useStore();\n\nconst metricRange = ref(\"24h\");\nconst loadingMetrics = ref(false);\nconst metricError = ref(null);\nconst nodeMetricsLoading = ref(false);\nconst nodeMetricsError = ref(null);\nconst nodeListError = ref(null);\n\nconst parseError = (error) => error?.response?.data?.message || error?.message || \"请求失败\";\nconst isForbidden = (error) => Number(error?.response?.status) === 403;\n\nconst loadTaskMetrics = async (params = {}) => {\n  loadingMetrics.value = true;\n  try {\n    await store.dispatch(\"tasks/loadMetrics\", params);\n    metricError.value = null;\n  } catch (error) {\n    const forbidden = isForbidden(error);\n    metricError.value = {\n      message: forbidden ? \"当前账号无权限查看任务统计\" : parseError(error),\n      forbidden\n    };\n    ElMessage[forbidden ? \"warning\" : \"error\"](metricError.value.message);\n  } finally {\n    loadingMetrics.value = false;\n  }\n};\n\nconst loadNodeMetricsData = async () => {\n  nodeMetricsLoading.value = true;\n  try {\n    await store.dispatch(\"nodes/loadNodeMetrics\");\n    nodeMetricsError.value = null;\n  } catch (error) {\n    const forbidden = isForbidden(error);\n    nodeMetricsError.value = {\n      message: forbidden ? \"当前账号无权限查看节点指标\" : parseError(error),\n      forbidden\n    };\n    ElMessage[forbidden ? \"warning\" : \"error\"](nodeMetricsError.value.message);\n  } finally {\n    nodeMetricsLoading.value = false;\n  }\n};\n\nconst loadNodesData = async () => {\n  try {\n    await store.dispatch(\"nodes/loadNodes\");\n    nodeListError.value = null;\n  } catch (error) {\n    const forbidden = isForbidden(error);\n    nodeListError.value = {\n      message: forbidden ? \"当前账号无权限查看节点列表\" : parseError(error),\n      forbidden\n    };\n    ElMessage[forbidden ? \"warning\" : \"error\"](nodeListError.value.message);\n  }\n};\n\nconst reloadMetrics = () => loadTaskMetrics({ range: metricRange.value });\nconst reloadNodes = () => Promise.all([loadNodeMetricsData(), loadNodesData()]);\n\nonMounted(async () => {\n  await Promise.all([\n    loadTaskMetrics({ range: metricRange.value }),\n    loadNodeMetricsData(),\n    loadNodesData()\n  ]);\n});\n\nwatch(metricRange, (range) => {\n  loadTaskMetrics({ range });\n});\n\nconst metrics = computed(() => store.getters[\"tasks/taskMetrics\"] || {});\nconst nodeMetrics = computed(() => store.getters[\"nodes/nodeMetrics\"] || {});\nconst nodeList = computed(() => store.getters[\"nodes/nodeList\"] || []);\nconst nodesLoading = computed(() => store.getters[\"nodes/nodesLoading\"]);\n\nconst normalizedTrend = computed(() =>\n  (metrics.value.trend || [])\n    .map((item) => ({\n      time: item.time ?? item.timestamp ?? \"\",\n      successRate: Number(item.successRate ?? item.success_rate ?? 0),\n      failedRate: Number(item.failedRate ?? item.failed_rate ?? 0)\n    }))\n    .filter((item) => item.time)\n);\n\nconst trendHasData = computed(() => normalizedTrend.value.length > 0);\n\nconst trendChartOptions = computed(() => {\n  if (!trendHasData.value) {\n    return {};\n  }\n  const categories = normalizedTrend.value.map((item) => item.time);\n  const successSeries = normalizedTrend.value.map((item) => Number(item.successRate.toFixed(2)));\n  const failedSeries = normalizedTrend.value.map((item) => Number(item.failedRate.toFixed(2)));\n  return {\n    color: [\"#22c55e\", \"#ef4444\"],\n    tooltip: {\n      trigger: \"axis\",\n      formatter: (params) =>\n        params.map((p) => `${p.marker}${p.seriesName}: ${Number(p.value).toFixed(2)}%`).join(\"<br/>\")\n    },\n    legend: {\n      data: [\"成功率\", \"失败率\"]\n    },\n    grid: { left: 40, right: 24, top: 30, bottom: 40 },\n    xAxis: {\n      type: \"category\",\n      boundaryGap: false,\n      data: categories\n    },\n    yAxis: {\n      type: \"value\",\n      min: 0,\n      max: 100,\n      axisLabel: { formatter: \"{value}%\" }\n    },\n    series: [\n      {\n        name: \"成功率\",\n        type: \"line\",\n        smooth: true,\n        areaStyle: { opacity: 0.12 },\n        data: successSeries\n      },\n      {\n        name: \"失败率\",\n        type: \"line\",\n        smooth: true,\n        areaStyle: { opacity: 0.08 },\n        data: failedSeries\n      }\n    ]\n  };\n});\n\nconst nodeChartHasData = computed(() => nodeList.value.length > 0);\n\nconst nodeChartOptions = computed(() => {\n  if (!nodeChartHasData.value) {\n    return {};\n  }\n  const names = nodeList.value.map((node) => node.name || node.id);\n  return {\n    color: [\"#38bdf8\", \"#f97316\"],\n    tooltip: { trigger: \"axis\" },\n    legend: { data: [\"CPU\", \"内存\"] },\n    grid: { left: 40, right: 24, top: 30, bottom: 50 },\n    xAxis: { type: \"category\", data: names },\n    yAxis: {\n      type: \"value\",\n      min: 0,\n      max: 100,\n      axisLabel: { formatter: \"{value}%\" }\n    },\n    series: [\n      {\n        name: \"CPU\",\n        type: \"bar\",\n        barMaxWidth: 28,\n        data: nodeList.value.map((node) => Number(node.cpu ?? 0))\n      },\n      {\n        name: \"内存\",\n        type: \"bar\",\n        barMaxWidth: 28,\n        data: nodeList.value.map((node) => Number(node.memory ?? 0))\n      }\n    ]\n  };\n});\n\nconst successTrendDelta = computed(() => {\n  if (!trendHasData.value || normalizedTrend.value.length < 2) {\n    return 0;\n  }\n  const values = normalizedTrend.value.map((item) => item.successRate);\n  return Number((values[values.length - 1] - values[0]).toFixed(1));\n});\n\nconst failureTrendDelta = computed(() => {\n  if (!trendHasData.value || normalizedTrend.value.length < 2) {\n    return 0;\n  }\n  const values = normalizedTrend.value.map((item) => item.failedRate);\n  return Number((values[values.length - 1] - values[0]).toFixed(1));\n});\n\nconst overviewCards = computed(() => {\n  const totalTasks = metrics.value.totalTasks ?? 0;\n  const inactiveTasks = metrics.value.inactiveTasks ?? 0;\n  const successRate = Number(metrics.value.successRate ?? 0).toFixed(1);\n  const failedToday = metrics.value.failedToday ?? 0;\n  const backlog = metrics.value.backlog ?? 0;\n\n  return [\n    {\n      key: \"total\",\n      title: \"任务总数\",\n      value: totalTasks,\n      tagType: \"primary\",\n      tagText: `停用 ${inactiveTasks}`,\n      trend: null,\n      subtitle: \"当前租户下所有任务数量\"\n    },\n    {\n      key: \"success\",\n      title: \"成功率\",\n      value: `${successRate}%`,\n      tagType: \"success\",\n      tagText: metricRange.value === \"7d\" ? \"最近 7 天\" : \"最近 24 小时\",\n      trend: successTrendDelta.value,\n      subtitle: successTrendDelta.value === 0 ? \"暂无波动\" : \"相较起始点的变化\"\n    },\n    {\n      key: \"failed\",\n      title: \"今日失败\",\n      value: failedToday,\n      tagType: \"danger\",\n      tagText: \"累计\",\n      trend: failureTrendDelta.value,\n      subtitle: \"自动降级会在阈值达到时触发\"\n    },\n    {\n      key: \"backlog\",\n      title: \"积压任务\",\n      value: backlog,\n      tagType: \"warning\",\n      tagText: \"待处理\",\n      trend: null,\n      subtitle: \"需要关注的等待或重试任务\"\n    }\n  ];\n});\n\nconst topFailedTasks = computed(() =>\n  (metrics.value.topFailed || []).map((item) => ({\n    id: item.id ?? `${item.name}-${item.taskId ?? \"\"}`,\n    name: item.name ?? \"-\",\n    owner: item.owner ?? \"-\",\n    failed: item.failed ?? 0,\n    lastFailed: item.lastFailed ?? \"-\"\n  }))\n);\n\nconst topFailedHasData = computed(() => topFailedTasks.value.length > 0);\n\nconst recentEvents = computed(() =>\n  (metrics.value.recentEvents || []).map((event) => ({\n    id: event.id ?? `${event.title ?? \"event\"}-${event.time ?? \"\"}`,\n    time: event.time ?? \"-\",\n    type: event.type ?? \"info\",\n    title: event.title ?? \"调度事件\",\n    tagLabel: event.tagLabel ?? \"\",\n    tagType: event.tagType ?? \"info\",\n    desc: event.desc ?? \"\"\n  }))\n);\n\nconst recentEventsHasData = computed(() => recentEvents.value.length > 0);\n\nconst nodesStatusLabel = computed(() => {\n  const online = nodeMetrics.value.onlineNodes ?? 0;\n  const total = nodeMetrics.value.totalNodes ?? 0;\n  const offline = nodeMetrics.value.offlineNodes ?? 0;\n  return `在线 ${online}/${total} | 离线 ${offline}`;\n});\n\nconst nodeHealthTag = computed(() => (nodeMetrics.value.offlineNodes > 0 ? \"danger\" : \"success\"));\nconst nodePanelError = computed(() => nodeMetricsError.value || nodeListError.value);\n\nconst navigateToTaskCenter = () => {\n  router.push(\"/tasks\");\n};\n</script>\n\n<style scoped lang=\"scss\">\n.dashboard {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  &__row {\n    display: grid;\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n    gap: 24px;\n  }\n\n  &__card {\n    border-radius: 16px;\n\n    .card__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 12px;\n    }\n\n    .card__title {\n      font-size: 16px;\n      font-weight: 600;\n      color: #0f172a;\n    }\n\n    .card__metrics {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n\n      .card__value {\n        font-size: 28px;\n        font-weight: 700;\n        color: #111827;\n      }\n\n      .card__trend {\n        display: inline-flex;\n        align-items: center;\n        font-size: 14px;\n        color: #059669;\n\n        &--down {\n          color: #dc2626;\n        }\n      }\n    }\n\n    .card__subtitle {\n      margin-top: 8px;\n      font-size: 13px;\n      color: #64748b;\n    }\n  }\n\n  &__panel {\n    border-radius: 16px;\n\n    .panel__header {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      font-weight: 600;\n    }\n  }\n}\n\n.trend {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  &__chart {\n    display: flex;\n    align-items: flex-end;\n    gap: 12px;\n    height: 220px;\n  }\n\n  &__bar {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 8px;\n    width: 24px;\n\n    span {\n      width: 12px;\n      border-radius: 6px;\n      transition: height 0.3s ease;\n    }\n  }\n\n  &__bar-success {\n    background: #22c55e;\n  }\n\n  &__bar-failed {\n    background: #ef4444;\n  }\n\n  &__time {\n    font-size: 12px;\n    color: #64748b;\n  }\n\n  &__legend {\n    display: flex;\n    gap: 18px;\n\n    .legend__item {\n      display: inline-flex;\n      align-items: center;\n      gap: 8px;\n      font-size: 12px;\n      color: #475569;\n    }\n\n    .legend__dot {\n      width: 10px;\n      height: 10px;\n      border-radius: 50%;\n\n      &--success {\n        background: #22c55e;\n      }\n\n      &--failed {\n        background: #ef4444;\n      }\n    }\n  }\n}\n\n.nodes {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  &__item {\n    padding: 16px;\n    border: 1px solid rgba(15, 23, 42, 0.08);\n    border-radius: 12px;\n    background: rgba(15, 23, 42, 0.02);\n  }\n\n  &__header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 12px;\n    font-weight: 600;\n    color: #1e293b;\n  }\n\n  &__metrics {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n  }\n\n  &__metric {\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n    font-size: 13px;\n    color: #475569;\n  }\n\n  &__meta {\n    display: flex;\n    justify-content: space-between;\n    color: #64748b;\n    font-size: 13px;\n  }\n}\n\n.event {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n\n  &__title {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-weight: 600;\n  }\n\n  &__meta {\n    font-size: 12px;\n    color: #64748b;\n  }\n}\n</style>\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}